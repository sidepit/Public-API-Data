// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidepit_api.proto

#include "sidepit_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sidepit_5fapi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuctionBid;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BookOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BtcLocks;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Contract;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContractBar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DepthItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EpochBar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EpochEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FillData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketQuote;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NewOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Product;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Schedule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SessionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnlockRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccountState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccountState_PositionsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignedTransaction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TraderPositionOrders_OrderfillsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TradingSession;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ExchangeStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OrderFills;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ActiveContractProduct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ActiveProduct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MarketData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TraderPositionOrders;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sidepit_5fapi_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Transaction;
}  // namespace protobuf_sidepit_5fapi_2eproto
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
      _instance;
  const ::NewOrder* new_order_;
  ::google::protobuf::internal::ArenaStringPtr cancel_orderid_;
  const ::AuctionBid* auction_bid_;
  const ::UnlockRequest* unlock_req_;
} _Transaction_default_instance_;
class SignedTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedTransaction>
      _instance;
} _SignedTransaction_default_instance_;
class NewOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewOrder>
      _instance;
} _NewOrder_default_instance_;
class AuctionBidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuctionBid>
      _instance;
} _AuctionBid_default_instance_;
class UnlockRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnlockRequest>
      _instance;
} _UnlockRequest_default_instance_;
class EpochEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpochEvent>
      _instance;
} _EpochEvent_default_instance_;
class ExchangeEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeEvent>
      _instance;
} _ExchangeEvent_default_instance_;
class TxBlockStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxBlockStream>
      _instance;
  const ::EpochEvent* epoch_event_;
  const ::SignedTransaction* stx_;
  const ::ExchangeEvent* exchange_event_;
} _TxBlockStream_default_instance_;
class MarketQuoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketQuote>
      _instance;
} _MarketQuote_default_instance_;
class EpochBarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpochBar>
      _instance;
} _EpochBar_default_instance_;
class ContractBarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContractBar>
      _instance;
} _ContractBar_default_instance_;
class BookOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BookOrder>
      _instance;
} _BookOrder_default_instance_;
class DepthItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthItem>
      _instance;
} _DepthItem_default_instance_;
class MarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketData>
      _instance;
} _MarketData_default_instance_;
class FillDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FillData>
      _instance;
} _FillData_default_instance_;
class OrderDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderData>
      _instance;
} _OrderData_default_instance_;
class ContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Contract>
      _instance;
} _Contract_default_instance_;
class ProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Product>
      _instance;
} _Product_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schedule>
      _instance;
} _Schedule_default_instance_;
class TradingSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradingSession>
      _instance;
} _TradingSession_default_instance_;
class SessionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionStatus>
      _instance;
} _SessionStatus_default_instance_;
class ExchangeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeStatus>
      _instance;
} _ExchangeStatus_default_instance_;
class ActiveContractProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveContractProduct>
      _instance;
} _ActiveContractProduct_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class OrderFillsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderFills>
      _instance;
} _OrderFills_default_instance_;
class AccountState_PositionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountState_PositionsEntry_DoNotUse>
      _instance;
} _AccountState_PositionsEntry_DoNotUse_default_instance_;
class AccountStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountState>
      _instance;
} _AccountState_default_instance_;
class BtcLocksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BtcLocks>
      _instance;
} _BtcLocks_default_instance_;
class RequestReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestReply>
      _instance;
} _RequestReply_default_instance_;
class ReplyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplyRequest>
      _instance;
} _ReplyRequest_default_instance_;
class TraderPositionOrders_OrderfillsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraderPositionOrders_OrderfillsEntry_DoNotUse>
      _instance;
} _TraderPositionOrders_OrderfillsEntry_DoNotUse_default_instance_;
class TraderPositionOrdersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraderPositionOrders>
      _instance;
} _TraderPositionOrders_default_instance_;
class ActiveProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveProduct>
      _instance;
} _ActiveProduct_default_instance_;
namespace protobuf_sidepit_5fapi_2eproto {
static void InitDefaultsTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Transaction_default_instance_;
    new (ptr) ::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Transaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Transaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTransaction}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_NewOrder.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_AuctionBid.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_UnlockRequest.base,}};

static void InitDefaultsSignedTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignedTransaction_default_instance_;
    new (ptr) ::SignedTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignedTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignedTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignedTransaction}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_Transaction.base,}};

static void InitDefaultsNewOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewOrder_default_instance_;
    new (ptr) ::NewOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewOrder}, {}};

static void InitDefaultsAuctionBid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuctionBid_default_instance_;
    new (ptr) ::AuctionBid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuctionBid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuctionBid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuctionBid}, {}};

static void InitDefaultsUnlockRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnlockRequest_default_instance_;
    new (ptr) ::UnlockRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnlockRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnlockRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnlockRequest}, {}};

static void InitDefaultsEpochEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EpochEvent_default_instance_;
    new (ptr) ::EpochEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EpochEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EpochEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpochEvent}, {}};

static void InitDefaultsExchangeEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExchangeEvent_default_instance_;
    new (ptr) ::ExchangeEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExchangeEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeEvent}, {}};

static void InitDefaultsTxBlockStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TxBlockStream_default_instance_;
    new (ptr) ::TxBlockStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TxBlockStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TxBlockStream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTxBlockStream}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_EpochEvent.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_SignedTransaction.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeEvent.base,}};

static void InitDefaultsMarketQuote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MarketQuote_default_instance_;
    new (ptr) ::MarketQuote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MarketQuote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketQuote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketQuote}, {}};

static void InitDefaultsEpochBar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EpochBar_default_instance_;
    new (ptr) ::EpochBar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EpochBar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EpochBar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpochBar}, {}};

static void InitDefaultsContractBar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContractBar_default_instance_;
    new (ptr) ::ContractBar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContractBar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContractBar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContractBar}, {}};

static void InitDefaultsBookOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BookOrder_default_instance_;
    new (ptr) ::BookOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BookOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BookOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBookOrder}, {}};

static void InitDefaultsDepthItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DepthItem_default_instance_;
    new (ptr) ::DepthItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepthItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DepthItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDepthItem}, {}};

static void InitDefaultsMarketData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MarketData_default_instance_;
    new (ptr) ::MarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MarketData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMarketData}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_EpochBar.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_MarketQuote.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_DepthItem.base,}};

static void InitDefaultsFillData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FillData_default_instance_;
    new (ptr) ::FillData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FillData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FillData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFillData}, {}};

static void InitDefaultsOrderData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OrderData_default_instance_;
    new (ptr) ::OrderData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OrderData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OrderData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOrderData}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_BookOrder.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_FillData.base,}};

static void InitDefaultsContract() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Contract_default_instance_;
    new (ptr) ::Contract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Contract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Contract =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContract}, {}};

static void InitDefaultsProduct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Product_default_instance_;
    new (ptr) ::Product();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Product::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Product =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProduct}, {}};

static void InitDefaultsSchedule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Schedule_default_instance_;
    new (ptr) ::Schedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Schedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Schedule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSchedule}, {}};

static void InitDefaultsTradingSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TradingSession_default_instance_;
    new (ptr) ::TradingSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TradingSession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradingSession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradingSession}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_Schedule.base,}};

static void InitDefaultsSessionStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SessionStatus_default_instance_;
    new (ptr) ::SessionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SessionStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SessionStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSessionStatus}, {}};

static void InitDefaultsExchangeStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExchangeStatus_default_instance_;
    new (ptr) ::ExchangeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExchangeStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExchangeStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExchangeStatus}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_TradingSession.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_SessionStatus.base,}};

static void InitDefaultsActiveContractProduct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActiveContractProduct_default_instance_;
    new (ptr) ::ActiveContractProduct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActiveContractProduct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ActiveContractProduct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsActiveContractProduct}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_Contract.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_Product.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_Schedule.base,}};

static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Position_default_instance_;
    new (ptr) ::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsOrderFills() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OrderFills_default_instance_;
    new (ptr) ::OrderFills();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OrderFills::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OrderFills =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOrderFills}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_BookOrder.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_FillData.base,}};

static void InitDefaultsAccountState_PositionsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountState_PositionsEntry_DoNotUse_default_instance_;
    new (ptr) ::AccountState_PositionsEntry_DoNotUse();
  }
  ::AccountState_PositionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccountState_PositionsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccountState_PositionsEntry_DoNotUse}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_Position.base,}};

static void InitDefaultsAccountState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AccountState_default_instance_;
    new (ptr) ::AccountState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AccountState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccountState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccountState}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_AccountState_PositionsEntry_DoNotUse.base,}};

static void InitDefaultsBtcLocks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BtcLocks_default_instance_;
    new (ptr) ::BtcLocks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BtcLocks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BtcLocks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBtcLocks}, {}};

static void InitDefaultsRequestReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestReply_default_instance_;
    new (ptr) ::RequestReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestReply}, {}};

static void InitDefaultsReplyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReplyRequest_default_instance_;
    new (ptr) ::ReplyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReplyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReplyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReplyRequest}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_TraderPositionOrders.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_ActiveProduct.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_MarketData.base,}};

static void InitDefaultsTraderPositionOrders_OrderfillsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TraderPositionOrders_OrderfillsEntry_DoNotUse_default_instance_;
    new (ptr) ::TraderPositionOrders_OrderfillsEntry_DoNotUse();
  }
  ::TraderPositionOrders_OrderfillsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TraderPositionOrders_OrderfillsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTraderPositionOrders_OrderfillsEntry_DoNotUse}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_OrderFills.base,}};

static void InitDefaultsTraderPositionOrders() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TraderPositionOrders_default_instance_;
    new (ptr) ::TraderPositionOrders();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TraderPositionOrders::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TraderPositionOrders =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTraderPositionOrders}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_TraderPositionOrders_OrderfillsEntry_DoNotUse.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_AccountState.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_BtcLocks.base,}};

static void InitDefaultsActiveProduct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActiveProduct_default_instance_;
    new (ptr) ::ActiveProduct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActiveProduct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ActiveProduct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsActiveProduct}, {
      &protobuf_sidepit_5fapi_2eproto::scc_info_ActiveContractProduct.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeStatus.base,
      &protobuf_sidepit_5fapi_2eproto::scc_info_ContractBar.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Transaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignedTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuctionBid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnlockRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpochEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxBlockStream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketQuote.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpochBar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContractBar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BookOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FillData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Contract.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Product.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schedule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradingSession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveContractProduct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderFills.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountState_PositionsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BtcLocks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TraderPositionOrders_OrderfillsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TraderPositionOrders.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveProduct.base);
}

::google::protobuf::Metadata file_level_metadata[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, timestamp_),
  offsetof(::TransactionDefaultTypeInternal, new_order_),
  offsetof(::TransactionDefaultTypeInternal, cancel_orderid_),
  offsetof(::TransactionDefaultTypeInternal, auction_bid_),
  offsetof(::TransactionDefaultTypeInternal, unlock_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, sidepit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Transaction, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, signature_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, tx_digest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignedTransaction, signature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewOrder, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewOrder, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewOrder, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewOrder, ticker_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuctionBid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuctionBid, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuctionBid, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuctionBid, ordering_salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuctionBid, bid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnlockRequest, minmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnlockRequest, explicit_amount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochEvent, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochEvent, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochEvent, signature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExchangeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExchangeEvent, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TxBlockStream, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TxBlockStream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TxBlockStream, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TxBlockStream, estate_),
  offsetof(::TxBlockStreamDefaultTypeInternal, epoch_event_),
  offsetof(::TxBlockStreamDefaultTypeInternal, stx_),
  offsetof(::TxBlockStreamDefaultTypeInternal, exchange_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TxBlockStream, txepoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, bidsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, bid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, ask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, asksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, lastsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, upordown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketQuote, epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EpochBar, volume_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, day_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, day_high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, day_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, day_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, day_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContractBar, previous_close_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, open_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, filled_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, remaining_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, canceled_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, agres_fill_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, agres_avg_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, pass_fill_qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, avg_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, orderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BookOrder, traderid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, bs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DepthItem, as_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, bar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MarketData, depth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, agressiveid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, passiveid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, agressive_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FillData, microtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderData, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderData, bookorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderData, fills_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, unit_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, price_quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, price_quote_units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, tic_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, tic_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, price_limit_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, initial_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, maint_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, position_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, trading_open_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Contract, trading_close_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, contract_symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, expiration_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, start_trading_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Product, is_active_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Schedule, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Schedule, trading_open_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Schedule, trading_close_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Schedule, product_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TradingSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TradingSession, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TradingSession, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TradingSession, prev_session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SessionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SessionStatus, estate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SessionStatus, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExchangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExchangeStatus, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ExchangeStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveContractProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveContractProduct, contract_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveContractProduct, product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveContractProduct, schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, avg_price_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderFills, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderFills, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OrderFills, fills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState_PositionsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState_PositionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState_PositionsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState_PositionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, sidepit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, net_locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, pending_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, realized_pnl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, unrealized_pnl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, margin_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, available_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, available_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, is_restricted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, reduce_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, carried_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, new_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, open_bids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AccountState, open_asks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, txid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, btc_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, lock_sats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, unlock_sats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BtcLocks, is_pending_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestReply, typemask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestReply, traderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestReply, ticker_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReplyRequest, typemask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReplyRequest, trader_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReplyRequest, active_product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReplyRequest, market_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders_OrderfillsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders_OrderfillsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders_OrderfillsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders_OrderfillsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, traderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, orderfills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, accountstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TraderPositionOrders, locks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveProduct, active_contract_product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveProduct, exchange_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ActiveProduct, contractbar_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Transaction)},
  { 13, -1, sizeof(::SignedTransaction)},
  { 23, -1, sizeof(::NewOrder)},
  { 32, -1, sizeof(::AuctionBid)},
  { 41, -1, sizeof(::UnlockRequest)},
  { 48, -1, sizeof(::EpochEvent)},
  { 57, -1, sizeof(::ExchangeEvent)},
  { 63, -1, sizeof(::TxBlockStream)},
  { 74, -1, sizeof(::MarketQuote)},
  { 88, -1, sizeof(::EpochBar)},
  { 100, -1, sizeof(::ContractBar)},
  { 117, -1, sizeof(::BookOrder)},
  { 136, -1, sizeof(::DepthItem)},
  { 146, -1, sizeof(::MarketData)},
  { 156, -1, sizeof(::FillData)},
  { 167, -1, sizeof(::OrderData)},
  { 176, -1, sizeof(::Contract)},
  { 194, -1, sizeof(::Product)},
  { 204, -1, sizeof(::Schedule)},
  { 213, -1, sizeof(::TradingSession)},
  { 221, -1, sizeof(::SessionStatus)},
  { 228, -1, sizeof(::ExchangeStatus)},
  { 235, -1, sizeof(::ActiveContractProduct)},
  { 243, -1, sizeof(::Position)},
  { 250, -1, sizeof(::OrderFills)},
  { 257, 264, sizeof(::AccountState_PositionsEntry_DoNotUse)},
  { 266, -1, sizeof(::AccountState)},
  { 287, -1, sizeof(::BtcLocks)},
  { 298, -1, sizeof(::RequestReply)},
  { 306, -1, sizeof(::ReplyRequest)},
  { 315, 322, sizeof(::TraderPositionOrders_OrderfillsEntry_DoNotUse)},
  { 324, -1, sizeof(::TraderPositionOrders)},
  { 334, -1, sizeof(::ActiveProduct)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignedTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NewOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AuctionBid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UnlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EpochEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExchangeEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TxBlockStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MarketQuote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EpochBar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContractBar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BookOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DepthItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FillData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OrderData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Contract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Product_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Schedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TradingSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SessionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ExchangeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ActiveContractProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OrderFills_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AccountState_PositionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AccountState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BtcLocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ReplyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TraderPositionOrders_OrderfillsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TraderPositionOrders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ActiveProduct_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sidepit_api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021sidepit_api.proto\"\317\001\n\013Transaction\022\017\n\007v"
      "ersion\030\001 \001(\005\022\021\n\ttimestamp\030\n \001(\004\022\036\n\tnew_o"
      "rder\030\024 \001(\0132\t.NewOrderH\000\022\030\n\016cancel_orderi"
      "d\030\036 \001(\tH\000\022\"\n\013auction_bid\030( \001(\0132\013.Auction"
      "BidH\000\022$\n\nunlock_req\0302 \001(\0132\016.UnlockReques"
      "tH\000\022\022\n\nsidepit_id\030e \001(\tB\004\n\002tx\"\207\001\n\021Signed"
      "Transaction\022\031\n\021signature_version\030\002 \001(\005\022!"
      "\n\013transaction\030\013 \001(\0132\014.Transaction\022\021\n\ttx_"
      "digest\030\025 \001(\t\022\016\n\006pubkey\030\037 \001(\t\022\021\n\tsignatur"
      "e\030o \001(\t\"E\n\010NewOrder\022\014\n\004side\030\013 \001(\021\022\014\n\004siz"
      "e\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\022\016\n\006ticker\030( \001(\t\"M"
      "\n\nAuctionBid\022\r\n\005epoch\030\n \001(\004\022\014\n\004hash\030\024 \001("
      "\t\022\025\n\rordering_salt\030\036 \001(\t\022\013\n\003bid\030( \001(\005\"\213\001"
      "\n\rUnlockRequest\022)\n\006minmax\030\024 \001(\0162\031.Unlock"
      "Request.AmountType\022\027\n\017explicit_amount\030\036 "
      "\001(\004\"6\n\nAmountType\022\010\n\004NONE\020\000\022\007\n\003MAX\020\001\022\007\n\003"
      "MIN\020\002\022\014\n\010EXPLICIT\020\003\"H\n\nEpochEvent\022\r\n\005epo"
      "ch\030\n \001(\004\022\014\n\004hash\030\024 \001(\t\022\n\n\002id\030d \001(\t\022\021\n\tsi"
      "gnature\030n \001(\014\".\n\rExchangeEvent\022\035\n\005state\030"
      "\n \001(\0162\016.ExchangeState\"\272\001\n\rTxBlockStream\022"
      "\r\n\005epoch\030\n \001(\004\022\036\n\006estate\030\024 \001(\0162\016.Exchang"
      "eState\022\"\n\013epoch_event\030\031 \001(\0132\013.EpochEvent"
      "H\000\022!\n\003stx\030\037 \001(\0132\022.SignedTransactionH\000\022(\n"
      "\016exchange_event\030( \001(\0132\016.ExchangeEventH\000B"
      "\t\n\007txepoch\"\232\001\n\013MarketQuote\022\017\n\007bidsize\030\n "
      "\001(\005\022\013\n\003bid\030\024 \001(\005\022\013\n\003ask\030\036 \001(\005\022\017\n\007asksize"
      "\030( \001(\005\022\014\n\004last\0302 \001(\005\022\020\n\010lastsize\030< \001(\005\022\020"
      "\n\010upordown\030F \001(\010\022\016\n\006ticker\030P \001(\t\022\r\n\005epoc"
      "h\030Z \001(\004\"q\n\010EpochBar\022\016\n\006ticker\030\n \001(\t\022\r\n\005e"
      "poch\030\017 \001(\004\022\014\n\004open\030\024 \001(\005\022\014\n\004high\030\036 \001(\005\022\013"
      "\n\003low\030( \001(\005\022\r\n\005close\0302 \001(\005\022\016\n\006volume\030< \001"
      "(\005\"\342\001\n\013ContractBar\022\016\n\006ticker\030\n \001(\t\022\r\n\005ep"
      "och\030\017 \001(\004\022\020\n\010day_open\030\024 \001(\005\022\020\n\010day_high\030"
      "\036 \001(\005\022\017\n\007day_low\030( \001(\005\022\021\n\tday_close\0302 \001("
      "\005\022\022\n\nday_volume\030< \001(\005\022\014\n\004high\030F \001(\005\022\013\n\003l"
      "ow\030P \001(\005\022\016\n\006volume\030Z \001(\005\022\025\n\ropen_interes"
      "t\030d \001(\005\022\026\n\016previous_close\030n \001(\005\"\236\002\n\tBook"
      "Order\022\014\n\004side\030\n \001(\021\022\r\n\005price\030\024 \001(\005\022\020\n\010op"
      "en_qty\030\036 \001(\005\022\022\n\nfilled_qty\030( \001(\005\022\025\n\rrema"
      "ining_qty\0302 \001(\005\022\024\n\014canceled_qty\030< \001(\005\022\026\n"
      "\016agres_fill_qty\030> \001(\005\022\027\n\017agres_avg_price"
      "\030\? \001(\002\022\025\n\rpass_fill_qty\030@ \001(\005\022\021\n\tavg_pri"
      "ce\030A \001(\002\022\016\n\006ticker\030F \001(\t\022\023\n\013update_time\030"
      "P \001(\t\022\017\n\007orderid\030Z \001(\t\022\020\n\010traderid\030d \001(\t"
      "\"H\n\tDepthItem\022\r\n\005level\030\n \001(\005\022\t\n\001b\030\036 \001(\005\022"
      "\t\n\001a\030( \001(\005\022\n\n\002bs\0302 \001(\005\022\n\n\002as\030< \001(\005\"|\n\nMa"
      "rketData\022\017\n\007version\030\001 \001(\005\022\r\n\005epoch\030\n \001(\004"
      "\022\026\n\003bar\030\024 \001(\0132\t.EpochBar\022\033\n\005quote\030\036 \001(\0132"
      "\014.MarketQuote\022\031\n\005depth\030( \003(\0132\n.DepthItem"
      "\"y\n\010FillData\022\023\n\013agressiveid\030\n \001(\t\022\021\n\tpas"
      "siveid\030\024 \001(\t\022\r\n\005price\030\036 \001(\r\022\013\n\003qty\030( \001(\r"
      "\022\026\n\016agressive_side\0302 \001(\005\022\021\n\tmicrotime\030< "
      "\001(\004\"e\n\tOrderData\022\017\n\007version\030\001 \001(\005\022\r\n\005epo"
      "ch\030\n \001(\004\022\036\n\nbookorders\030( \003(\0132\n.BookOrder"
      "\022\030\n\005fills\0302 \003(\0132\t.FillData\"\253\002\n\010Contract\022"
      "\016\n\006symbol\030\n \001(\t\022\021\n\tunit_size\030\024 \001(\r\022\014\n\004un"
      "it\030\036 \001(\t\022\023\n\013price_quote\030( \001(\t\022\031\n\021price_q"
      "uote_units\0302 \001(\005\022\017\n\007tic_min\030< \001(\r\022\021\n\ttic"
      "_value\030F \001(\r\022\033\n\023price_limit_percent\030P \001("
      "\005\022\026\n\016initial_margin\030Z \001(\004\022\024\n\014maint_margi"
      "n\030d \001(\004\022\027\n\017position_limits\030n \001(\005\022\031\n\021trad"
      "ing_open_time\030x \001(\004\022\033\n\022trading_close_tim"
      "e\030\202\001 \001(\004\"z\n\007Product\022\016\n\006ticker\030\n \001(\t\022\027\n\017c"
      "ontract_symbol\030\024 \001(\t\022\027\n\017expiration_date\030"
      "\036 \001(\004\022\032\n\022start_trading_date\030( \001(\004\022\021\n\tis_"
      "active\0302 \001(\010\"`\n\010Schedule\022\014\n\004date\030\n \001(\004\022\031"
      "\n\021trading_open_time\030\024 \001(\004\022\032\n\022trading_clo"
      "se_time\030\036 \001(\004\022\017\n\007product\030( \003(\t\"Z\n\016Tradin"
      "gSession\022\022\n\nsession_id\030\n \001(\t\022\033\n\010schedule"
      "\030\024 \001(\0132\t.Schedule\022\027\n\017prev_session_id\0302 \001"
      "(\t\"C\n\rSessionStatus\022\036\n\006estate\030\n \001(\0162\016.Ex"
      "changeState\022\022\n\nsession_id\030\024 \001(\t\"R\n\016Excha"
      "ngeStatus\022 \n\007session\030\n \001(\0132\017.TradingSess"
      "ion\022\036\n\006status\030\024 \001(\0132\016.SessionStatus\"l\n\025A"
      "ctiveContractProduct\022\033\n\010contract\030\n \001(\0132\t"
      ".Contract\022\031\n\007product\030\024 \001(\0132\010.Product\022\033\n\010"
      "schedule\030\036 \001(\0132\t.Schedule\"/\n\010Position\022\020\n"
      "\010position\030\n \001(\021\022\021\n\tavg_price\030\024 \001(\r\"A\n\nOr"
      "derFills\022\031\n\005order\030\n \001(\0132\n.BookOrder\022\030\n\005f"
      "ills\0302 \003(\0132\t.FillData\"\316\003\n\014AccountState\022\022"
      "\n\nsidepit_id\030\n \001(\t\022\016\n\006pubkey\030\024 \001(\t\022\022\n\nne"
      "t_locked\030\036 \001(\003\022\026\n\016pending_unlock\030( \001(\003\022\024"
      "\n\014realized_pnl\0302 \001(\003\022\026\n\016unrealized_pnl\030<"
      " \001(\003\022\027\n\017margin_required\030P \001(\003\022\031\n\021availab"
      "le_balance\030Z \001(\003\022\030\n\020available_margin\030d \001"
      "(\003\022\025\n\ris_restricted\030n \001(\010\022\023\n\013reduce_only"
      "\030p \001(\005\022/\n\tpositions\030x \003(\0132\034.AccountState"
      ".PositionsEntry\022\031\n\020carried_position\030\202\001 \001"
      "(\021\022\025\n\014new_position\030\214\001 \001(\021\022\022\n\topen_bids\030\226"
      "\001 \001(\005\022\022\n\topen_asks\030\240\001 \001(\005\032;\n\016PositionsEn"
      "try\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.Positi"
      "on:\0028\001\"y\n\010BtcLocks\022\014\n\004txid\030\n \001(\t\022\016\n\006pubk"
      "ey\030\024 \001(\t\022\023\n\013btc_address\030\036 \001(\t\022\021\n\tlock_sa"
      "ts\030( \001(\004\022\023\n\013unlock_sats\0302 \001(\004\022\022\n\nis_pend"
      "ing\030< \001(\010\"B\n\014RequestReply\022\020\n\010TypeMask\030\001 "
      "\001(\005\022\020\n\010traderid\030\n \001(\t\022\016\n\006ticker\030\036 \001(\t\"\233\001"
      "\n\014ReplyRequest\022\020\n\010TypeMask\030\n \001(\005\022/\n\020trad"
      "er_positions\030\024 \001(\0132\025.TraderPositionOrder"
      "s\022&\n\016active_product\030\036 \001(\0132\016.ActiveProduc"
      "t\022 \n\013market_data\030( \001(\0132\013.MarketData\"\362\001\n\024"
      "TraderPositionOrders\022\020\n\010traderid\030\n \001(\t\022\016"
      "\n\006symbol\030\024 \001(\t\0229\n\norderfills\030( \003(\0132%.Tra"
      "derPositionOrders.OrderfillsEntry\022#\n\014acc"
      "ountstate\0302 \001(\0132\r.AccountState\022\030\n\005locks\030"
      "< \003(\0132\t.BtcLocks\032>\n\017OrderfillsEntry\022\013\n\003k"
      "ey\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.OrderFills:\0028\001"
      "\"\225\001\n\rActiveProduct\0227\n\027active_contract_pr"
      "oduct\030\n \001(\0132\026.ActiveContractProduct\022(\n\017e"
      "xchange_status\030\024 \001(\0132\017.ExchangeStatus\022!\n"
      "\013contractbar\030\036 \001(\0132\014.ContractBar*\255\001\n\rExc"
      "hangeState\022\024\n\020EXCHANGE_UNKNOWN\020\000\022\031\n\025EXCH"
      "ANGE_PENDING_OPEN\020\001\022\021\n\rEXCHANGE_OPEN\020\002\022\027"
      "\n\023EXCHANGE_RECOVERING\020\003\022\024\n\020EXCHANGE_CLOS"
      "ING\020\004\022\024\n\020EXCHANGE_SETTLED\020\005\022\023\n\017EXCHANGE_"
      "CLOSED\020\006*K\n\021ReplyRequestTypes\022\010\n\004NONE\020\000\022"
      "\022\n\016ACTIVE_PRODUCT\020\001\022\r\n\tPOSITIONS\020\002\022\t\n\005QU"
      "OTE\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sidepit_api.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sidepit_5fapi_2eproto
const ::google::protobuf::EnumDescriptor* UnlockRequest_AmountType_descriptor() {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sidepit_5fapi_2eproto::file_level_enum_descriptors[0];
}
bool UnlockRequest_AmountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UnlockRequest_AmountType UnlockRequest::NONE;
const UnlockRequest_AmountType UnlockRequest::MAX;
const UnlockRequest_AmountType UnlockRequest::MIN;
const UnlockRequest_AmountType UnlockRequest::EXPLICIT;
const UnlockRequest_AmountType UnlockRequest::AmountType_MIN;
const UnlockRequest_AmountType UnlockRequest::AmountType_MAX;
const int UnlockRequest::AmountType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExchangeState_descriptor() {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sidepit_5fapi_2eproto::file_level_enum_descriptors[1];
}
bool ExchangeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplyRequestTypes_descriptor() {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sidepit_5fapi_2eproto::file_level_enum_descriptors[2];
}
bool ReplyRequestTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::_Transaction_default_instance_.new_order_ = const_cast< ::NewOrder*>(
      ::NewOrder::internal_default_instance());
  ::_Transaction_default_instance_.cancel_orderid_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_Transaction_default_instance_.auction_bid_ = const_cast< ::AuctionBid*>(
      ::AuctionBid::internal_default_instance());
  ::_Transaction_default_instance_.unlock_req_ = const_cast< ::UnlockRequest*>(
      ::UnlockRequest::internal_default_instance());
}
void Transaction::set_allocated_new_order(::NewOrder* new_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tx();
  if (new_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_order, submessage_arena);
    }
    set_has_new_order();
    tx_.new_order_ = new_order;
  }
  // @@protoc_insertion_point(field_set_allocated:Transaction.new_order)
}
void Transaction::set_allocated_auction_bid(::AuctionBid* auction_bid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tx();
  if (auction_bid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      auction_bid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auction_bid, submessage_arena);
    }
    set_has_auction_bid();
    tx_.auction_bid_ = auction_bid;
  }
  // @@protoc_insertion_point(field_set_allocated:Transaction.auction_bid)
}
void Transaction::set_allocated_unlock_req(::UnlockRequest* unlock_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tx();
  if (unlock_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unlock_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unlock_req, submessage_arena);
    }
    set_has_unlock_req();
    tx_.unlock_req_ = unlock_req;
  }
  // @@protoc_insertion_point(field_set_allocated:Transaction.unlock_req)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kVersionFieldNumber;
const int Transaction::kTimestampFieldNumber;
const int Transaction::kNewOrderFieldNumber;
const int Transaction::kCancelOrderidFieldNumber;
const int Transaction::kAuctionBidFieldNumber;
const int Transaction::kUnlockReqFieldNumber;
const int Transaction::kSidepitIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_Transaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sidepit_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sidepit_id().size() > 0) {
    sidepit_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sidepit_id_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  clear_has_tx();
  switch (from.tx_case()) {
    case kNewOrder: {
      mutable_new_order()->::NewOrder::MergeFrom(from.new_order());
      break;
    }
    case kCancelOrderid: {
      set_cancel_orderid(from.cancel_orderid());
      break;
    }
    case kAuctionBid: {
      mutable_auction_bid()->::AuctionBid::MergeFrom(from.auction_bid());
      break;
    }
    case kUnlockReq: {
      mutable_unlock_req()->::UnlockRequest::MergeFrom(from.unlock_req());
      break;
    }
    case TX_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Transaction)
}

void Transaction::SharedCtor() {
  sidepit_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  clear_has_tx();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  sidepit_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_tx()) {
    clear_tx();
  }
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transaction& Transaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_Transaction.base);
  return *internal_default_instance();
}


void Transaction::clear_tx() {
// @@protoc_insertion_point(one_of_clear_start:Transaction)
  switch (tx_case()) {
    case kNewOrder: {
      delete tx_.new_order_;
      break;
    }
    case kCancelOrderid: {
      tx_.cancel_orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAuctionBid: {
      delete tx_.auction_bid_;
      break;
    }
    case kUnlockReq: {
      delete tx_.unlock_req_;
      break;
    }
    case TX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TX_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sidepit_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  clear_tx();
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Transaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NewOrder new_order = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cancel_orderid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cancel_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cancel_orderid().data(), static_cast<int>(this->cancel_orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Transaction.cancel_orderid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AuctionBid auction_bid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auction_bid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .UnlockRequest unlock_req = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unlock_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sidepit_id = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sidepit_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Transaction.sidepit_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // .NewOrder new_order = 20;
  if (has_new_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_new_order(), output);
  }

  // string cancel_orderid = 30;
  if (has_cancel_orderid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cancel_orderid().data(), static_cast<int>(this->cancel_orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.cancel_orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->cancel_orderid(), output);
  }

  // .AuctionBid auction_bid = 40;
  if (has_auction_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_auction_bid(), output);
  }

  // .UnlockRequest unlock_req = 50;
  if (has_unlock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_internal_unlock_req(), output);
  }

  // string sidepit_id = 101;
  if (this->sidepit_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.sidepit_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->sidepit_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // .NewOrder new_order = 20;
  if (has_new_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_new_order(), deterministic, target);
  }

  // string cancel_orderid = 30;
  if (has_cancel_orderid()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cancel_orderid().data(), static_cast<int>(this->cancel_orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.cancel_orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->cancel_orderid(), target);
  }

  // .AuctionBid auction_bid = 40;
  if (has_auction_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_auction_bid(), deterministic, target);
  }

  // .UnlockRequest unlock_req = 50;
  if (has_unlock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->_internal_unlock_req(), deterministic, target);
  }

  // string sidepit_id = 101;
  if (this->sidepit_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.sidepit_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->sidepit_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transaction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sidepit_id = 101;
  if (this->sidepit_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sidepit_id());
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  switch (tx_case()) {
    // .NewOrder new_order = 20;
    case kNewOrder: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_.new_order_);
      break;
    }
    // string cancel_orderid = 30;
    case kCancelOrderid: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cancel_orderid());
      break;
    }
    // .AuctionBid auction_bid = 40;
    case kAuctionBid: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_.auction_bid_);
      break;
    }
    // .UnlockRequest unlock_req = 50;
    case kUnlockReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tx_.unlock_req_);
      break;
    }
    case TX_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sidepit_id().size() > 0) {

    sidepit_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sidepit_id_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.tx_case()) {
    case kNewOrder: {
      mutable_new_order()->::NewOrder::MergeFrom(from.new_order());
      break;
    }
    case kCancelOrderid: {
      set_cancel_orderid(from.cancel_orderid());
      break;
    }
    case kAuctionBid: {
      mutable_auction_bid()->::AuctionBid::MergeFrom(from.auction_bid());
      break;
    }
    case kUnlockReq: {
      mutable_unlock_req()->::UnlockRequest::MergeFrom(from.unlock_req());
      break;
    }
    case TX_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  sidepit_id_.Swap(&other->sidepit_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(tx_, other->tx_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignedTransaction::InitAsDefaultInstance() {
  ::_SignedTransaction_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::Transaction*>(
      ::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedTransaction::kSignatureVersionFieldNumber;
const int SignedTransaction::kTransactionFieldNumber;
const int SignedTransaction::kTxDigestFieldNumber;
const int SignedTransaction::kPubkeyFieldNumber;
const int SignedTransaction::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedTransaction::SignedTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_SignedTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignedTransaction)
}
SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx_digest().size() > 0) {
    tx_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_digest_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::Transaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  signature_version_ = from.signature_version_;
  // @@protoc_insertion_point(copy_constructor:SignedTransaction)
}

void SignedTransaction::SharedCtor() {
  tx_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_version_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(signature_version_));
}

SignedTransaction::~SignedTransaction() {
  // @@protoc_insertion_point(destructor:SignedTransaction)
  SharedDtor();
}

void SignedTransaction::SharedDtor() {
  tx_digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void SignedTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignedTransaction::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignedTransaction& SignedTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_SignedTransaction.base);
  return *internal_default_instance();
}


void SignedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
  signature_version_ = 0;
  _internal_metadata_.Clear();
}

bool SignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignedTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 signature_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signature_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Transaction transaction = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tx_digest = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_digest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_digest().data(), static_cast<int>(this->tx_digest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignedTransaction.tx_digest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pubkey = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), static_cast<int>(this->pubkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignedTransaction.pubkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignedTransaction.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignedTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignedTransaction)
  return false;
#undef DO_
}

void SignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 signature_version = 2;
  if (this->signature_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signature_version(), output);
  }

  // .Transaction transaction = 11;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_transaction(), output);
  }

  // string tx_digest = 21;
  if (this->tx_digest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_digest().data(), static_cast<int>(this->tx_digest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.tx_digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->tx_digest(), output);
  }

  // string pubkey = 31;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->pubkey(), output);
  }

  // string signature = 111;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      111, this->signature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SignedTransaction)
}

::google::protobuf::uint8* SignedTransaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 signature_version = 2;
  if (this->signature_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signature_version(), target);
  }

  // .Transaction transaction = 11;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_transaction(), deterministic, target);
  }

  // string tx_digest = 21;
  if (this->tx_digest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_digest().data(), static_cast<int>(this->tx_digest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.tx_digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->tx_digest(), target);
  }

  // string pubkey = 31;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->pubkey(), target);
  }

  // string signature = 111;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignedTransaction.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        111, this->signature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignedTransaction)
  return target;
}

size_t SignedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignedTransaction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tx_digest = 21;
  if (this->tx_digest().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_digest());
  }

  // string pubkey = 31;
  if (this->pubkey().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  // string signature = 111;
  if (this->signature().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // .Transaction transaction = 11;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int32 signature_version = 2;
  if (this->signature_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedTransaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedTransaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignedTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignedTransaction)
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_digest().size() > 0) {

    tx_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_digest_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::Transaction::MergeFrom(from.transaction());
  }
  if (from.signature_version() != 0) {
    set_signature_version(from.signature_version());
  }
}

void SignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {
  return true;
}

void SignedTransaction::Swap(SignedTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedTransaction::InternalSwap(SignedTransaction* other) {
  using std::swap;
  tx_digest_.Swap(&other->tx_digest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
  swap(signature_version_, other->signature_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignedTransaction::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewOrder::kSideFieldNumber;
const int NewOrder::kSizeFieldNumber;
const int NewOrder::kPriceFieldNumber;
const int NewOrder::kTickerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewOrder::NewOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_NewOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewOrder)
}
NewOrder::NewOrder(const NewOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&price_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:NewOrder)
}

void NewOrder::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
}

NewOrder::~NewOrder() {
  // @@protoc_insertion_point(destructor:NewOrder)
  SharedDtor();
}

void NewOrder::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewOrder::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewOrder& NewOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_NewOrder.base);
  return *internal_default_instance();
}


void NewOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&price_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool NewOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 side = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticker = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NewOrder.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewOrder)
  return false;
#undef DO_
}

void NewOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 side = 11;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->side(), output);
  }

  // int32 size = 20;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // int32 price = 30;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  // string ticker = 40;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewOrder.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->ticker(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NewOrder)
}

::google::protobuf::uint8* NewOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NewOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 side = 11;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->side(), target);
  }

  // int32 size = 20;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // int32 price = 30;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  // string ticker = 40;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewOrder.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->ticker(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewOrder)
  return target;
}

size_t NewOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 40;
  if (this->ticker().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // int32 price = 30;
  if (this->price() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // sint32 side = 11;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->side());
  }

  // int32 size = 20;
  if (this->size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewOrder)
    MergeFrom(*source);
  }
}

void NewOrder::MergeFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void NewOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrder::CopyFrom(const NewOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrder::IsInitialized() const {
  return true;
}

void NewOrder::Swap(NewOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewOrder::InternalSwap(NewOrder* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(side_, other->side_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewOrder::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuctionBid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuctionBid::kEpochFieldNumber;
const int AuctionBid::kHashFieldNumber;
const int AuctionBid::kOrderingSaltFieldNumber;
const int AuctionBid::kBidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuctionBid::AuctionBid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_AuctionBid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuctionBid)
}
AuctionBid::AuctionBid(const AuctionBid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ordering_salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordering_salt().size() > 0) {
    ordering_salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordering_salt_);
  }
  ::memcpy(&bid_, &from.bid_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&bid_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:AuctionBid)
}

void AuctionBid::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordering_salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(epoch_));
}

AuctionBid::~AuctionBid() {
  // @@protoc_insertion_point(destructor:AuctionBid)
  SharedDtor();
}

void AuctionBid::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordering_salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuctionBid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuctionBid::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuctionBid& AuctionBid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_AuctionBid.base);
  return *internal_default_instance();
}


void AuctionBid::Clear() {
// @@protoc_insertion_point(message_clear_start:AuctionBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordering_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&bid_)) + sizeof(epoch_));
  _internal_metadata_.Clear();
}

bool AuctionBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuctionBid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 epoch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AuctionBid.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ordering_salt = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordering_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordering_salt().data(), static_cast<int>(this->ordering_salt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AuctionBid.ordering_salt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuctionBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuctionBid)
  return false;
#undef DO_
}

void AuctionBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuctionBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->epoch(), output);
  }

  // string hash = 20;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuctionBid.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->hash(), output);
  }

  // string ordering_salt = 30;
  if (this->ordering_salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordering_salt().data(), static_cast<int>(this->ordering_salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuctionBid.ordering_salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ordering_salt(), output);
  }

  // int32 bid = 40;
  if (this->bid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->bid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AuctionBid)
}

::google::protobuf::uint8* AuctionBid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AuctionBid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->epoch(), target);
  }

  // string hash = 20;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuctionBid.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hash(), target);
  }

  // string ordering_salt = 30;
  if (this->ordering_salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordering_salt().data(), static_cast<int>(this->ordering_salt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuctionBid.ordering_salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ordering_salt(), target);
  }

  // int32 bid = 40;
  if (this->bid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->bid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuctionBid)
  return target;
}

size_t AuctionBid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuctionBid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hash = 20;
  if (this->hash().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string ordering_salt = 30;
  if (this->ordering_salt().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordering_salt());
  }

  // int32 bid = 40;
  if (this->bid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid());
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionBid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AuctionBid)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionBid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuctionBid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AuctionBid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AuctionBid)
    MergeFrom(*source);
  }
}

void AuctionBid::MergeFrom(const AuctionBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuctionBid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.ordering_salt().size() > 0) {

    ordering_salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordering_salt_);
  }
  if (from.bid() != 0) {
    set_bid(from.bid());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void AuctionBid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AuctionBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionBid::CopyFrom(const AuctionBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuctionBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionBid::IsInitialized() const {
  return true;
}

void AuctionBid::Swap(AuctionBid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuctionBid::InternalSwap(AuctionBid* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordering_salt_.Swap(&other->ordering_salt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bid_, other->bid_);
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuctionBid::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnlockRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlockRequest::kMinmaxFieldNumber;
const int UnlockRequest::kExplicitAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlockRequest::UnlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_UnlockRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnlockRequest)
}
UnlockRequest::UnlockRequest(const UnlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minmax_, &from.minmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&explicit_amount_) -
    reinterpret_cast<char*>(&minmax_)) + sizeof(explicit_amount_));
  // @@protoc_insertion_point(copy_constructor:UnlockRequest)
}

void UnlockRequest::SharedCtor() {
  ::memset(&minmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explicit_amount_) -
      reinterpret_cast<char*>(&minmax_)) + sizeof(explicit_amount_));
}

UnlockRequest::~UnlockRequest() {
  // @@protoc_insertion_point(destructor:UnlockRequest)
  SharedDtor();
}

void UnlockRequest::SharedDtor() {
}

void UnlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnlockRequest::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnlockRequest& UnlockRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_UnlockRequest.base);
  return *internal_default_instance();
}


void UnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explicit_amount_) -
      reinterpret_cast<char*>(&minmax_)) + sizeof(explicit_amount_));
  _internal_metadata_.Clear();
}

bool UnlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnlockRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .UnlockRequest.AmountType minmax = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_minmax(static_cast< ::UnlockRequest_AmountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 explicit_amount = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &explicit_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnlockRequest)
  return false;
#undef DO_
}

void UnlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UnlockRequest.AmountType minmax = 20;
  if (this->minmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->minmax(), output);
  }

  // uint64 explicit_amount = 30;
  if (this->explicit_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->explicit_amount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UnlockRequest)
}

::google::protobuf::uint8* UnlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UnlockRequest.AmountType minmax = 20;
  if (this->minmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->minmax(), target);
  }

  // uint64 explicit_amount = 30;
  if (this->explicit_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->explicit_amount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnlockRequest)
  return target;
}

size_t UnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnlockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .UnlockRequest.AmountType minmax = 20;
  if (this->minmax() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->minmax());
  }

  // uint64 explicit_amount = 30;
  if (this->explicit_amount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->explicit_amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnlockRequest)
    MergeFrom(*source);
  }
}

void UnlockRequest::MergeFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minmax() != 0) {
    set_minmax(from.minmax());
  }
  if (from.explicit_amount() != 0) {
    set_explicit_amount(from.explicit_amount());
  }
}

void UnlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRequest::CopyFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRequest::IsInitialized() const {
  return true;
}

void UnlockRequest::Swap(UnlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlockRequest::InternalSwap(UnlockRequest* other) {
  using std::swap;
  swap(minmax_, other->minmax_);
  swap(explicit_amount_, other->explicit_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnlockRequest::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EpochEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpochEvent::kEpochFieldNumber;
const int EpochEvent::kHashFieldNumber;
const int EpochEvent::kIdFieldNumber;
const int EpochEvent::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpochEvent::EpochEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_EpochEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpochEvent)
}
EpochEvent::EpochEvent(const EpochEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:EpochEvent)
}

void EpochEvent::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = GOOGLE_ULONGLONG(0);
}

EpochEvent::~EpochEvent() {
  // @@protoc_insertion_point(destructor:EpochEvent)
  SharedDtor();
}

void EpochEvent::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EpochEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EpochEvent::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpochEvent& EpochEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_EpochEvent.base);
  return *internal_default_instance();
}


void EpochEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:EpochEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool EpochEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpochEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 epoch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EpochEvent.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EpochEvent.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpochEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpochEvent)
  return false;
#undef DO_
}

void EpochEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpochEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->epoch(), output);
  }

  // string hash = 20;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochEvent.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->hash(), output);
  }

  // string id = 100;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochEvent.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->id(), output);
  }

  // bytes signature = 110;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->signature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EpochEvent)
}

::google::protobuf::uint8* EpochEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpochEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->epoch(), target);
  }

  // string hash = 20;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochEvent.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hash(), target);
  }

  // string id = 100;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochEvent.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->id(), target);
  }

  // bytes signature = 110;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        110, this->signature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpochEvent)
  return target;
}

size_t EpochEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpochEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hash = 20;
  if (this->hash().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string id = 100;
  if (this->id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes signature = 110;
  if (this->signature().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpochEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpochEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpochEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpochEvent)
    MergeFrom(*source);
  }
}

void EpochEvent::MergeFrom(const EpochEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpochEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void EpochEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpochEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochEvent::CopyFrom(const EpochEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpochEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochEvent::IsInitialized() const {
  return true;
}

void EpochEvent::Swap(EpochEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpochEvent::InternalSwap(EpochEvent* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EpochEvent::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeEvent::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeEvent::ExchangeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExchangeEvent)
}
ExchangeEvent::ExchangeEvent(const ExchangeEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ExchangeEvent)
}

void ExchangeEvent::SharedCtor() {
  state_ = 0;
}

ExchangeEvent::~ExchangeEvent() {
  // @@protoc_insertion_point(destructor:ExchangeEvent)
  SharedDtor();
}

void ExchangeEvent::SharedDtor() {
}

void ExchangeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeEvent::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeEvent& ExchangeEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeEvent.base);
  return *internal_default_instance();
}


void ExchangeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ExchangeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

bool ExchangeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExchangeEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ExchangeState state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ExchangeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExchangeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExchangeEvent)
  return false;
#undef DO_
}

void ExchangeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExchangeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExchangeState state = 10;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ExchangeEvent)
}

::google::protobuf::uint8* ExchangeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExchangeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExchangeState state = 10;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExchangeEvent)
  return target;
}

size_t ExchangeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExchangeEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ExchangeState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExchangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExchangeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExchangeEvent)
    MergeFrom(*source);
  }
}

void ExchangeEvent::MergeFrom(const ExchangeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExchangeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ExchangeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExchangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeEvent::CopyFrom(const ExchangeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExchangeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeEvent::IsInitialized() const {
  return true;
}

void ExchangeEvent::Swap(ExchangeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeEvent::InternalSwap(ExchangeEvent* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeEvent::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxBlockStream::InitAsDefaultInstance() {
  ::_TxBlockStream_default_instance_.epoch_event_ = const_cast< ::EpochEvent*>(
      ::EpochEvent::internal_default_instance());
  ::_TxBlockStream_default_instance_.stx_ = const_cast< ::SignedTransaction*>(
      ::SignedTransaction::internal_default_instance());
  ::_TxBlockStream_default_instance_.exchange_event_ = const_cast< ::ExchangeEvent*>(
      ::ExchangeEvent::internal_default_instance());
}
void TxBlockStream::set_allocated_epoch_event(::EpochEvent* epoch_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_txepoch();
  if (epoch_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      epoch_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, epoch_event, submessage_arena);
    }
    set_has_epoch_event();
    txepoch_.epoch_event_ = epoch_event;
  }
  // @@protoc_insertion_point(field_set_allocated:TxBlockStream.epoch_event)
}
void TxBlockStream::set_allocated_stx(::SignedTransaction* stx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_txepoch();
  if (stx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stx, submessage_arena);
    }
    set_has_stx();
    txepoch_.stx_ = stx;
  }
  // @@protoc_insertion_point(field_set_allocated:TxBlockStream.stx)
}
void TxBlockStream::set_allocated_exchange_event(::ExchangeEvent* exchange_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_txepoch();
  if (exchange_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exchange_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exchange_event, submessage_arena);
    }
    set_has_exchange_event();
    txepoch_.exchange_event_ = exchange_event;
  }
  // @@protoc_insertion_point(field_set_allocated:TxBlockStream.exchange_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxBlockStream::kEpochFieldNumber;
const int TxBlockStream::kEstateFieldNumber;
const int TxBlockStream::kEpochEventFieldNumber;
const int TxBlockStream::kStxFieldNumber;
const int TxBlockStream::kExchangeEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxBlockStream::TxBlockStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_TxBlockStream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TxBlockStream)
}
TxBlockStream::TxBlockStream(const TxBlockStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estate_, &from.estate_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&estate_)) + sizeof(epoch_));
  clear_has_txepoch();
  switch (from.txepoch_case()) {
    case kEpochEvent: {
      mutable_epoch_event()->::EpochEvent::MergeFrom(from.epoch_event());
      break;
    }
    case kStx: {
      mutable_stx()->::SignedTransaction::MergeFrom(from.stx());
      break;
    }
    case kExchangeEvent: {
      mutable_exchange_event()->::ExchangeEvent::MergeFrom(from.exchange_event());
      break;
    }
    case TXEPOCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TxBlockStream)
}

void TxBlockStream::SharedCtor() {
  ::memset(&estate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&estate_)) + sizeof(epoch_));
  clear_has_txepoch();
}

TxBlockStream::~TxBlockStream() {
  // @@protoc_insertion_point(destructor:TxBlockStream)
  SharedDtor();
}

void TxBlockStream::SharedDtor() {
  if (has_txepoch()) {
    clear_txepoch();
  }
}

void TxBlockStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxBlockStream::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxBlockStream& TxBlockStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_TxBlockStream.base);
  return *internal_default_instance();
}


void TxBlockStream::clear_txepoch() {
// @@protoc_insertion_point(one_of_clear_start:TxBlockStream)
  switch (txepoch_case()) {
    case kEpochEvent: {
      delete txepoch_.epoch_event_;
      break;
    }
    case kStx: {
      delete txepoch_.stx_;
      break;
    }
    case kExchangeEvent: {
      delete txepoch_.exchange_event_;
      break;
    }
    case TXEPOCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TXEPOCH_NOT_SET;
}


void TxBlockStream::Clear() {
// @@protoc_insertion_point(message_clear_start:TxBlockStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&estate_)) + sizeof(epoch_));
  clear_txepoch();
  _internal_metadata_.Clear();
}

bool TxBlockStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TxBlockStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 epoch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExchangeState estate = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_estate(static_cast< ::ExchangeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EpochEvent epoch_event = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_epoch_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SignedTransaction stx = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExchangeEvent exchange_event = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exchange_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TxBlockStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TxBlockStream)
  return false;
#undef DO_
}

void TxBlockStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TxBlockStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->epoch(), output);
  }

  // .ExchangeState estate = 20;
  if (this->estate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->estate(), output);
  }

  // .EpochEvent epoch_event = 25;
  if (has_epoch_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_epoch_event(), output);
  }

  // .SignedTransaction stx = 31;
  if (has_stx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_stx(), output);
  }

  // .ExchangeEvent exchange_event = 40;
  if (has_exchange_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_exchange_event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TxBlockStream)
}

::google::protobuf::uint8* TxBlockStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TxBlockStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->epoch(), target);
  }

  // .ExchangeState estate = 20;
  if (this->estate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->estate(), target);
  }

  // .EpochEvent epoch_event = 25;
  if (has_epoch_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_epoch_event(), deterministic, target);
  }

  // .SignedTransaction stx = 31;
  if (has_stx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_stx(), deterministic, target);
  }

  // .ExchangeEvent exchange_event = 40;
  if (has_exchange_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_exchange_event(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxBlockStream)
  return target;
}

size_t TxBlockStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxBlockStream)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ExchangeState estate = 20;
  if (this->estate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->estate());
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  switch (txepoch_case()) {
    // .EpochEvent epoch_event = 25;
    case kEpochEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *txepoch_.epoch_event_);
      break;
    }
    // .SignedTransaction stx = 31;
    case kStx: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *txepoch_.stx_);
      break;
    }
    // .ExchangeEvent exchange_event = 40;
    case kExchangeEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *txepoch_.exchange_event_);
      break;
    }
    case TXEPOCH_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxBlockStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TxBlockStream)
  GOOGLE_DCHECK_NE(&from, this);
  const TxBlockStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxBlockStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TxBlockStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TxBlockStream)
    MergeFrom(*source);
  }
}

void TxBlockStream::MergeFrom(const TxBlockStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TxBlockStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estate() != 0) {
    set_estate(from.estate());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  switch (from.txepoch_case()) {
    case kEpochEvent: {
      mutable_epoch_event()->::EpochEvent::MergeFrom(from.epoch_event());
      break;
    }
    case kStx: {
      mutable_stx()->::SignedTransaction::MergeFrom(from.stx());
      break;
    }
    case kExchangeEvent: {
      mutable_exchange_event()->::ExchangeEvent::MergeFrom(from.exchange_event());
      break;
    }
    case TXEPOCH_NOT_SET: {
      break;
    }
  }
}

void TxBlockStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TxBlockStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxBlockStream::CopyFrom(const TxBlockStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxBlockStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxBlockStream::IsInitialized() const {
  return true;
}

void TxBlockStream::Swap(TxBlockStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxBlockStream::InternalSwap(TxBlockStream* other) {
  using std::swap;
  swap(estate_, other->estate_);
  swap(epoch_, other->epoch_);
  swap(txepoch_, other->txepoch_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxBlockStream::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketQuote::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketQuote::kBidsizeFieldNumber;
const int MarketQuote::kBidFieldNumber;
const int MarketQuote::kAskFieldNumber;
const int MarketQuote::kAsksizeFieldNumber;
const int MarketQuote::kLastFieldNumber;
const int MarketQuote::kLastsizeFieldNumber;
const int MarketQuote::kUpordownFieldNumber;
const int MarketQuote::kTickerFieldNumber;
const int MarketQuote::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketQuote::MarketQuote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_MarketQuote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarketQuote)
}
MarketQuote::MarketQuote(const MarketQuote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  ::memcpy(&upordown_, &from.upordown_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&upordown_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:MarketQuote)
}

void MarketQuote::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upordown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&upordown_)) + sizeof(epoch_));
}

MarketQuote::~MarketQuote() {
  // @@protoc_insertion_point(destructor:MarketQuote)
  SharedDtor();
}

void MarketQuote::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketQuote::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketQuote& MarketQuote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_MarketQuote.base);
  return *internal_default_instance();
}


void MarketQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:MarketQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upordown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&upordown_)) + sizeof(epoch_));
  _internal_metadata_.Clear();
}

bool MarketQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarketQuote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 bidsize = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ask = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 asksize = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastsize = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upordown = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upordown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticker = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MarketQuote.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarketQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarketQuote)
  return false;
#undef DO_
}

void MarketQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarketQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bidsize = 10;
  if (this->bidsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bidsize(), output);
  }

  // int32 bid = 20;
  if (this->bid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bid(), output);
  }

  // int32 ask = 30;
  if (this->ask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ask(), output);
  }

  // int32 asksize = 40;
  if (this->asksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->asksize(), output);
  }

  // int32 last = 50;
  if (this->last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->last(), output);
  }

  // int32 lastsize = 60;
  if (this->lastsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->lastsize(), output);
  }

  // bool upordown = 70;
  if (this->upordown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->upordown(), output);
  }

  // string ticker = 80;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketQuote.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->ticker(), output);
  }

  // uint64 epoch = 90;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(90, this->epoch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MarketQuote)
}

::google::protobuf::uint8* MarketQuote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MarketQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bidsize = 10;
  if (this->bidsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bidsize(), target);
  }

  // int32 bid = 20;
  if (this->bid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bid(), target);
  }

  // int32 ask = 30;
  if (this->ask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ask(), target);
  }

  // int32 asksize = 40;
  if (this->asksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->asksize(), target);
  }

  // int32 last = 50;
  if (this->last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->last(), target);
  }

  // int32 lastsize = 60;
  if (this->lastsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->lastsize(), target);
  }

  // bool upordown = 70;
  if (this->upordown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->upordown(), target);
  }

  // string ticker = 80;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MarketQuote.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->ticker(), target);
  }

  // uint64 epoch = 90;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(90, this->epoch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarketQuote)
  return target;
}

size_t MarketQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MarketQuote)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 80;
  if (this->ticker().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // bool upordown = 70;
  if (this->upordown() != 0) {
    total_size += 2 + 1;
  }

  // int32 bidsize = 10;
  if (this->bidsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidsize());
  }

  // int32 bid = 20;
  if (this->bid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid());
  }

  // int32 ask = 30;
  if (this->ask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask());
  }

  // int32 asksize = 40;
  if (this->asksize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->asksize());
  }

  // int32 last = 50;
  if (this->last() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last());
  }

  // int32 lastsize = 60;
  if (this->lastsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastsize());
  }

  // uint64 epoch = 90;
  if (this->epoch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketQuote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MarketQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketQuote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketQuote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MarketQuote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MarketQuote)
    MergeFrom(*source);
  }
}

void MarketQuote::MergeFrom(const MarketQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MarketQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.upordown() != 0) {
    set_upordown(from.upordown());
  }
  if (from.bidsize() != 0) {
    set_bidsize(from.bidsize());
  }
  if (from.bid() != 0) {
    set_bid(from.bid());
  }
  if (from.ask() != 0) {
    set_ask(from.ask());
  }
  if (from.asksize() != 0) {
    set_asksize(from.asksize());
  }
  if (from.last() != 0) {
    set_last(from.last());
  }
  if (from.lastsize() != 0) {
    set_lastsize(from.lastsize());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void MarketQuote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MarketQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuote::CopyFrom(const MarketQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MarketQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuote::IsInitialized() const {
  return true;
}

void MarketQuote::Swap(MarketQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketQuote::InternalSwap(MarketQuote* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upordown_, other->upordown_);
  swap(bidsize_, other->bidsize_);
  swap(bid_, other->bid_);
  swap(ask_, other->ask_);
  swap(asksize_, other->asksize_);
  swap(last_, other->last_);
  swap(lastsize_, other->lastsize_);
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketQuote::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EpochBar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpochBar::kTickerFieldNumber;
const int EpochBar::kEpochFieldNumber;
const int EpochBar::kOpenFieldNumber;
const int EpochBar::kHighFieldNumber;
const int EpochBar::kLowFieldNumber;
const int EpochBar::kCloseFieldNumber;
const int EpochBar::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpochBar::EpochBar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_EpochBar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpochBar)
}
EpochBar::EpochBar(const EpochBar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:EpochBar)
}

void EpochBar::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(close_));
}

EpochBar::~EpochBar() {
  // @@protoc_insertion_point(destructor:EpochBar)
  SharedDtor();
}

void EpochBar::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EpochBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EpochBar::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpochBar& EpochBar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_EpochBar.base);
  return *internal_default_instance();
}


void EpochBar::Clear() {
// @@protoc_insertion_point(message_clear_start:EpochBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(close_));
  _internal_metadata_.Clear();
}

bool EpochBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpochBar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticker = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EpochBar.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 high = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 low = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpochBar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpochBar)
  return false;
#undef DO_
}

void EpochBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpochBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochBar.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ticker(), output);
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->epoch(), output);
  }

  // int32 open = 20;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->open(), output);
  }

  // int32 high = 30;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->high(), output);
  }

  // int32 low = 40;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->low(), output);
  }

  // int32 close = 50;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->close(), output);
  }

  // int32 volume = 60;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->volume(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EpochBar)
}

::google::protobuf::uint8* EpochBar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpochBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EpochBar.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ticker(), target);
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->epoch(), target);
  }

  // int32 open = 20;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->open(), target);
  }

  // int32 high = 30;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->high(), target);
  }

  // int32 low = 40;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->low(), target);
  }

  // int32 close = 50;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->close(), target);
  }

  // int32 volume = 60;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->volume(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpochBar)
  return target;
}

size_t EpochBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpochBar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 10;
  if (this->ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // int32 volume = 60;
  if (this->volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  // int32 open = 20;
  if (this->open() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open());
  }

  // int32 high = 30;
  if (this->high() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->high());
  }

  // int32 low = 40;
  if (this->low() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->low());
  }

  // int32 close = 50;
  if (this->close() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochBar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpochBar)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochBar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpochBar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpochBar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpochBar)
    MergeFrom(*source);
  }
}

void EpochBar::MergeFrom(const EpochBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpochBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
}

void EpochBar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpochBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochBar::CopyFrom(const EpochBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpochBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochBar::IsInitialized() const {
  return true;
}

void EpochBar::Swap(EpochBar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpochBar::InternalSwap(EpochBar* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(volume_, other->volume_);
  swap(epoch_, other->epoch_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EpochBar::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContractBar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContractBar::kTickerFieldNumber;
const int ContractBar::kEpochFieldNumber;
const int ContractBar::kDayOpenFieldNumber;
const int ContractBar::kDayHighFieldNumber;
const int ContractBar::kDayLowFieldNumber;
const int ContractBar::kDayCloseFieldNumber;
const int ContractBar::kDayVolumeFieldNumber;
const int ContractBar::kHighFieldNumber;
const int ContractBar::kLowFieldNumber;
const int ContractBar::kVolumeFieldNumber;
const int ContractBar::kOpenInterestFieldNumber;
const int ContractBar::kPreviousCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContractBar::ContractBar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ContractBar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContractBar)
}
ContractBar::ContractBar(const ContractBar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_close_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(previous_close_));
  // @@protoc_insertion_point(copy_constructor:ContractBar)
}

void ContractBar::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_close_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(previous_close_));
}

ContractBar::~ContractBar() {
  // @@protoc_insertion_point(destructor:ContractBar)
  SharedDtor();
}

void ContractBar::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContractBar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContractBar::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContractBar& ContractBar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ContractBar.base);
  return *internal_default_instance();
}


void ContractBar::Clear() {
// @@protoc_insertion_point(message_clear_start:ContractBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_close_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(previous_close_));
  _internal_metadata_.Clear();
}

bool ContractBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContractBar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticker = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContractBar.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day_open = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day_high = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day_low = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day_close = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day_volume = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 high = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 low = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_interest = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 previous_close = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previous_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContractBar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContractBar)
  return false;
#undef DO_
}

void ContractBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContractBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContractBar.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ticker(), output);
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->epoch(), output);
  }

  // int32 day_open = 20;
  if (this->day_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->day_open(), output);
  }

  // int32 day_high = 30;
  if (this->day_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->day_high(), output);
  }

  // int32 day_low = 40;
  if (this->day_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->day_low(), output);
  }

  // int32 day_close = 50;
  if (this->day_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->day_close(), output);
  }

  // int32 day_volume = 60;
  if (this->day_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->day_volume(), output);
  }

  // int32 high = 70;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->high(), output);
  }

  // int32 low = 80;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->low(), output);
  }

  // int32 volume = 90;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->volume(), output);
  }

  // int32 open_interest = 100;
  if (this->open_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->open_interest(), output);
  }

  // int32 previous_close = 110;
  if (this->previous_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->previous_close(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ContractBar)
}

::google::protobuf::uint8* ContractBar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContractBar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContractBar.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ticker(), target);
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->epoch(), target);
  }

  // int32 day_open = 20;
  if (this->day_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->day_open(), target);
  }

  // int32 day_high = 30;
  if (this->day_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->day_high(), target);
  }

  // int32 day_low = 40;
  if (this->day_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->day_low(), target);
  }

  // int32 day_close = 50;
  if (this->day_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->day_close(), target);
  }

  // int32 day_volume = 60;
  if (this->day_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->day_volume(), target);
  }

  // int32 high = 70;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->high(), target);
  }

  // int32 low = 80;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->low(), target);
  }

  // int32 volume = 90;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->volume(), target);
  }

  // int32 open_interest = 100;
  if (this->open_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->open_interest(), target);
  }

  // int32 previous_close = 110;
  if (this->previous_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->previous_close(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContractBar)
  return target;
}

size_t ContractBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContractBar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 10;
  if (this->ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // uint64 epoch = 15;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  // int32 day_open = 20;
  if (this->day_open() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_open());
  }

  // int32 day_high = 30;
  if (this->day_high() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_high());
  }

  // int32 day_low = 40;
  if (this->day_low() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_low());
  }

  // int32 day_close = 50;
  if (this->day_close() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_close());
  }

  // int32 day_volume = 60;
  if (this->day_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day_volume());
  }

  // int32 high = 70;
  if (this->high() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->high());
  }

  // int32 low = 80;
  if (this->low() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->low());
  }

  // int32 volume = 90;
  if (this->volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 open_interest = 100;
  if (this->open_interest() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_interest());
  }

  // int32 previous_close = 110;
  if (this->previous_close() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->previous_close());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractBar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContractBar)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractBar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContractBar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContractBar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContractBar)
    MergeFrom(*source);
  }
}

void ContractBar::MergeFrom(const ContractBar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContractBar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.day_open() != 0) {
    set_day_open(from.day_open());
  }
  if (from.day_high() != 0) {
    set_day_high(from.day_high());
  }
  if (from.day_low() != 0) {
    set_day_low(from.day_low());
  }
  if (from.day_close() != 0) {
    set_day_close(from.day_close());
  }
  if (from.day_volume() != 0) {
    set_day_volume(from.day_volume());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.open_interest() != 0) {
    set_open_interest(from.open_interest());
  }
  if (from.previous_close() != 0) {
    set_previous_close(from.previous_close());
  }
}

void ContractBar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContractBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractBar::CopyFrom(const ContractBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContractBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractBar::IsInitialized() const {
  return true;
}

void ContractBar::Swap(ContractBar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContractBar::InternalSwap(ContractBar* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(epoch_, other->epoch_);
  swap(day_open_, other->day_open_);
  swap(day_high_, other->day_high_);
  swap(day_low_, other->day_low_);
  swap(day_close_, other->day_close_);
  swap(day_volume_, other->day_volume_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(volume_, other->volume_);
  swap(open_interest_, other->open_interest_);
  swap(previous_close_, other->previous_close_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContractBar::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BookOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BookOrder::kSideFieldNumber;
const int BookOrder::kPriceFieldNumber;
const int BookOrder::kOpenQtyFieldNumber;
const int BookOrder::kFilledQtyFieldNumber;
const int BookOrder::kRemainingQtyFieldNumber;
const int BookOrder::kCanceledQtyFieldNumber;
const int BookOrder::kAgresFillQtyFieldNumber;
const int BookOrder::kAgresAvgPriceFieldNumber;
const int BookOrder::kPassFillQtyFieldNumber;
const int BookOrder::kAvgPriceFieldNumber;
const int BookOrder::kTickerFieldNumber;
const int BookOrder::kUpdateTimeFieldNumber;
const int BookOrder::kOrderidFieldNumber;
const int BookOrder::kTraderidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BookOrder::BookOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_BookOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BookOrder)
}
BookOrder::BookOrder(const BookOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_time().size() > 0) {
    update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
  }
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traderid().size() > 0) {
    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  ::memcpy(&side_, &from.side_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_price_) -
    reinterpret_cast<char*>(&side_)) + sizeof(avg_price_));
  // @@protoc_insertion_point(copy_constructor:BookOrder)
}

void BookOrder::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_price_) -
      reinterpret_cast<char*>(&side_)) + sizeof(avg_price_));
}

BookOrder::~BookOrder() {
  // @@protoc_insertion_point(destructor:BookOrder)
  SharedDtor();
}

void BookOrder::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BookOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BookOrder::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BookOrder& BookOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_BookOrder.base);
  return *internal_default_instance();
}


void BookOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:BookOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_price_) -
      reinterpret_cast<char*>(&side_)) + sizeof(avg_price_));
  _internal_metadata_.Clear();
}

bool BookOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BookOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 side = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_qty = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 filled_qty = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filled_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_qty = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 canceled_qty = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canceled_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 agres_fill_qty = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agres_fill_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float agres_avg_price = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 509 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &agres_avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pass_fill_qty = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_fill_qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float avg_price = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 525 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticker = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BookOrder.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string update_time = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_time().data(), static_cast<int>(this->update_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BookOrder.update_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orderid = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BookOrder.orderid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traderid = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), static_cast<int>(this->traderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BookOrder.traderid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BookOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BookOrder)
  return false;
#undef DO_
}

void BookOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BookOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 side = 10;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->side(), output);
  }

  // int32 price = 20;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->price(), output);
  }

  // int32 open_qty = 30;
  if (this->open_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->open_qty(), output);
  }

  // int32 filled_qty = 40;
  if (this->filled_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->filled_qty(), output);
  }

  // int32 remaining_qty = 50;
  if (this->remaining_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->remaining_qty(), output);
  }

  // int32 canceled_qty = 60;
  if (this->canceled_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->canceled_qty(), output);
  }

  // int32 agres_fill_qty = 62;
  if (this->agres_fill_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->agres_fill_qty(), output);
  }

  // float agres_avg_price = 63;
  if (this->agres_avg_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->agres_avg_price(), output);
  }

  // int32 pass_fill_qty = 64;
  if (this->pass_fill_qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->pass_fill_qty(), output);
  }

  // float avg_price = 65;
  if (this->avg_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->avg_price(), output);
  }

  // string ticker = 70;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->ticker(), output);
  }

  // string update_time = 80;
  if (this->update_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_time().data(), static_cast<int>(this->update_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.update_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->update_time(), output);
  }

  // string orderid = 90;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->orderid(), output);
  }

  // string traderid = 100;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.traderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->traderid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BookOrder)
}

::google::protobuf::uint8* BookOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BookOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 side = 10;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->side(), target);
  }

  // int32 price = 20;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->price(), target);
  }

  // int32 open_qty = 30;
  if (this->open_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->open_qty(), target);
  }

  // int32 filled_qty = 40;
  if (this->filled_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->filled_qty(), target);
  }

  // int32 remaining_qty = 50;
  if (this->remaining_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->remaining_qty(), target);
  }

  // int32 canceled_qty = 60;
  if (this->canceled_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->canceled_qty(), target);
  }

  // int32 agres_fill_qty = 62;
  if (this->agres_fill_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->agres_fill_qty(), target);
  }

  // float agres_avg_price = 63;
  if (this->agres_avg_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->agres_avg_price(), target);
  }

  // int32 pass_fill_qty = 64;
  if (this->pass_fill_qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->pass_fill_qty(), target);
  }

  // float avg_price = 65;
  if (this->avg_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->avg_price(), target);
  }

  // string ticker = 70;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->ticker(), target);
  }

  // string update_time = 80;
  if (this->update_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_time().data(), static_cast<int>(this->update_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.update_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->update_time(), target);
  }

  // string orderid = 90;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->orderid(), target);
  }

  // string traderid = 100;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BookOrder.traderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->traderid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BookOrder)
  return target;
}

size_t BookOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BookOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 70;
  if (this->ticker().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // string update_time = 80;
  if (this->update_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_time());
  }

  // string orderid = 90;
  if (this->orderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // string traderid = 100;
  if (this->traderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // sint32 side = 10;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->side());
  }

  // int32 price = 20;
  if (this->price() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 open_qty = 30;
  if (this->open_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_qty());
  }

  // int32 filled_qty = 40;
  if (this->filled_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->filled_qty());
  }

  // int32 remaining_qty = 50;
  if (this->remaining_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining_qty());
  }

  // int32 canceled_qty = 60;
  if (this->canceled_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->canceled_qty());
  }

  // int32 agres_fill_qty = 62;
  if (this->agres_fill_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agres_fill_qty());
  }

  // float agres_avg_price = 63;
  if (this->agres_avg_price() != 0) {
    total_size += 2 + 4;
  }

  // int32 pass_fill_qty = 64;
  if (this->pass_fill_qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pass_fill_qty());
  }

  // float avg_price = 65;
  if (this->avg_price() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BookOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const BookOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BookOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BookOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BookOrder)
    MergeFrom(*source);
  }
}

void BookOrder::MergeFrom(const BookOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BookOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.update_time().size() > 0) {

    update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.open_qty() != 0) {
    set_open_qty(from.open_qty());
  }
  if (from.filled_qty() != 0) {
    set_filled_qty(from.filled_qty());
  }
  if (from.remaining_qty() != 0) {
    set_remaining_qty(from.remaining_qty());
  }
  if (from.canceled_qty() != 0) {
    set_canceled_qty(from.canceled_qty());
  }
  if (from.agres_fill_qty() != 0) {
    set_agres_fill_qty(from.agres_fill_qty());
  }
  if (from.agres_avg_price() != 0) {
    set_agres_avg_price(from.agres_avg_price());
  }
  if (from.pass_fill_qty() != 0) {
    set_pass_fill_qty(from.pass_fill_qty());
  }
  if (from.avg_price() != 0) {
    set_avg_price(from.avg_price());
  }
}

void BookOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BookOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookOrder::CopyFrom(const BookOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BookOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookOrder::IsInitialized() const {
  return true;
}

void BookOrder::Swap(BookOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BookOrder::InternalSwap(BookOrder* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_time_.Swap(&other->update_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  traderid_.Swap(&other->traderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(open_qty_, other->open_qty_);
  swap(filled_qty_, other->filled_qty_);
  swap(remaining_qty_, other->remaining_qty_);
  swap(canceled_qty_, other->canceled_qty_);
  swap(agres_fill_qty_, other->agres_fill_qty_);
  swap(agres_avg_price_, other->agres_avg_price_);
  swap(pass_fill_qty_, other->pass_fill_qty_);
  swap(avg_price_, other->avg_price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BookOrder::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthItem::kLevelFieldNumber;
const int DepthItem::kBFieldNumber;
const int DepthItem::kAFieldNumber;
const int DepthItem::kBsFieldNumber;
const int DepthItem::kAsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthItem::DepthItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_DepthItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepthItem)
}
DepthItem::DepthItem(const DepthItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&bs_) -
    reinterpret_cast<char*>(&as_)) + sizeof(bs_));
  // @@protoc_insertion_point(copy_constructor:DepthItem)
}

void DepthItem::SharedCtor() {
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_) -
      reinterpret_cast<char*>(&as_)) + sizeof(bs_));
}

DepthItem::~DepthItem() {
  // @@protoc_insertion_point(destructor:DepthItem)
  SharedDtor();
}

void DepthItem::SharedDtor() {
}

void DepthItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthItem::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthItem& DepthItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_DepthItem.base);
  return *internal_default_instance();
}


void DepthItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_) -
      reinterpret_cast<char*>(&as_)) + sizeof(bs_));
  _internal_metadata_.Clear();
}

bool DepthItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DepthItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 b = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 a = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bs = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 as = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &as_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DepthItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DepthItem)
  return false;
#undef DO_
}

void DepthItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 10;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  // int32 b = 30;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->b(), output);
  }

  // int32 a = 40;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->a(), output);
  }

  // int32 bs = 50;
  if (this->bs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->bs(), output);
  }

  // int32 as = 60;
  if (this->as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->as(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DepthItem)
}

::google::protobuf::uint8* DepthItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DepthItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 10;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }

  // int32 b = 30;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->b(), target);
  }

  // int32 a = 40;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->a(), target);
  }

  // int32 bs = 50;
  if (this->bs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->bs(), target);
  }

  // int32 as = 60;
  if (this->as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->as(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepthItem)
  return target;
}

size_t DepthItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepthItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 as = 60;
  if (this->as() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->as());
  }

  // int32 level = 10;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 b = 30;
  if (this->b() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  // int32 a = 40;
  if (this->a() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a());
  }

  // int32 bs = 50;
  if (this->bs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepthItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepthItem)
    MergeFrom(*source);
  }
}

void DepthItem::MergeFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepthItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.as() != 0) {
    set_as(from.as());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.bs() != 0) {
    set_bs(from.bs());
  }
}

void DepthItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthItem::CopyFrom(const DepthItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepthItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthItem::IsInitialized() const {
  return true;
}

void DepthItem::Swap(DepthItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthItem::InternalSwap(DepthItem* other) {
  using std::swap;
  swap(as_, other->as_);
  swap(level_, other->level_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(bs_, other->bs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthItem::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketData::InitAsDefaultInstance() {
  ::_MarketData_default_instance_._instance.get_mutable()->bar_ = const_cast< ::EpochBar*>(
      ::EpochBar::internal_default_instance());
  ::_MarketData_default_instance_._instance.get_mutable()->quote_ = const_cast< ::MarketQuote*>(
      ::MarketQuote::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketData::kVersionFieldNumber;
const int MarketData::kEpochFieldNumber;
const int MarketData::kBarFieldNumber;
const int MarketData::kQuoteFieldNumber;
const int MarketData::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketData::MarketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_MarketData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarketData)
}
MarketData::MarketData(const MarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      depth_(from.depth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bar()) {
    bar_ = new ::EpochBar(*from.bar_);
  } else {
    bar_ = NULL;
  }
  if (from.has_quote()) {
    quote_ = new ::MarketQuote(*from.quote_);
  } else {
    quote_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&version_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:MarketData)
}

void MarketData::SharedCtor() {
  ::memset(&bar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&bar_)) + sizeof(epoch_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:MarketData)
  SharedDtor();
}

void MarketData::SharedDtor() {
  if (this != internal_default_instance()) delete bar_;
  if (this != internal_default_instance()) delete quote_;
}

void MarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketData::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketData& MarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_MarketData.base);
  return *internal_default_instance();
}


void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depth_.Clear();
  if (GetArenaNoVirtual() == NULL && bar_ != NULL) {
    delete bar_;
  }
  bar_ = NULL;
  if (GetArenaNoVirtual() == NULL && quote_ != NULL) {
    delete quote_;
  }
  quote_ = NULL;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&version_)) + sizeof(epoch_));
  _internal_metadata_.Clear();
}

bool MarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EpochBar bar = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MarketQuote quote = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DepthItem depth = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_depth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarketData)
  return false;
#undef DO_
}

void MarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->epoch(), output);
  }

  // .EpochBar bar = 20;
  if (this->has_bar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_bar(), output);
  }

  // .MarketQuote quote = 30;
  if (this->has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_quote(), output);
  }

  // repeated .DepthItem depth = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->depth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40,
      this->depth(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MarketData)
}

::google::protobuf::uint8* MarketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->epoch(), target);
  }

  // .EpochBar bar = 20;
  if (this->has_bar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_bar(), deterministic, target);
  }

  // .MarketQuote quote = 30;
  if (this->has_quote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_quote(), deterministic, target);
  }

  // repeated .DepthItem depth = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->depth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->depth(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarketData)
  return target;
}

size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MarketData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DepthItem depth = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->depth_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->depth(static_cast<int>(i)));
    }
  }

  // .EpochBar bar = 20;
  if (this->has_bar()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bar_);
  }

  // .MarketQuote quote = 30;
  if (this->has_quote()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quote_);
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MarketData)
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  depth_.MergeFrom(from.depth_);
  if (from.has_bar()) {
    mutable_bar()->::EpochBar::MergeFrom(from.bar());
  }
  if (from.has_quote()) {
    mutable_quote()->::MarketQuote::MergeFrom(from.quote());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void MarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  return true;
}

void MarketData::Swap(MarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketData::InternalSwap(MarketData* other) {
  using std::swap;
  CastToBase(&depth_)->InternalSwap(CastToBase(&other->depth_));
  swap(bar_, other->bar_);
  swap(quote_, other->quote_);
  swap(version_, other->version_);
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketData::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FillData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillData::kAgressiveidFieldNumber;
const int FillData::kPassiveidFieldNumber;
const int FillData::kPriceFieldNumber;
const int FillData::kQtyFieldNumber;
const int FillData::kAgressiveSideFieldNumber;
const int FillData::kMicrotimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillData::FillData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_FillData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:FillData)
}
FillData::FillData(const FillData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agressiveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.agressiveid().size() > 0) {
    agressiveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agressiveid_);
  }
  passiveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passiveid().size() > 0) {
    passiveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passiveid_);
  }
  ::memcpy(&agressive_side_, &from.agressive_side_,
    static_cast<size_t>(reinterpret_cast<char*>(&microtime_) -
    reinterpret_cast<char*>(&agressive_side_)) + sizeof(microtime_));
  // @@protoc_insertion_point(copy_constructor:FillData)
}

void FillData::SharedCtor() {
  agressiveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passiveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&agressive_side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microtime_) -
      reinterpret_cast<char*>(&agressive_side_)) + sizeof(microtime_));
}

FillData::~FillData() {
  // @@protoc_insertion_point(destructor:FillData)
  SharedDtor();
}

void FillData::SharedDtor() {
  agressiveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passiveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FillData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FillData::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FillData& FillData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_FillData.base);
  return *internal_default_instance();
}


void FillData::Clear() {
// @@protoc_insertion_point(message_clear_start:FillData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agressiveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passiveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&agressive_side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microtime_) -
      reinterpret_cast<char*>(&agressive_side_)) + sizeof(microtime_));
  _internal_metadata_.Clear();
}

bool FillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FillData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string agressiveid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agressiveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agressiveid().data(), static_cast<int>(this->agressiveid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FillData.agressiveid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passiveid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passiveid().data(), static_cast<int>(this->passiveid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FillData.passiveid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 price = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 qty = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 agressive_side = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agressive_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 microtime = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &microtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FillData)
  return false;
#undef DO_
}

void FillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FillData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agressiveid = 10;
  if (this->agressiveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agressiveid().data(), static_cast<int>(this->agressiveid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FillData.agressiveid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->agressiveid(), output);
  }

  // string passiveid = 20;
  if (this->passiveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passiveid().data(), static_cast<int>(this->passiveid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FillData.passiveid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->passiveid(), output);
  }

  // uint32 price = 30;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->price(), output);
  }

  // uint32 qty = 40;
  if (this->qty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->qty(), output);
  }

  // int32 agressive_side = 50;
  if (this->agressive_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->agressive_side(), output);
  }

  // uint64 microtime = 60;
  if (this->microtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->microtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FillData)
}

::google::protobuf::uint8* FillData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FillData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agressiveid = 10;
  if (this->agressiveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agressiveid().data(), static_cast<int>(this->agressiveid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FillData.agressiveid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->agressiveid(), target);
  }

  // string passiveid = 20;
  if (this->passiveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passiveid().data(), static_cast<int>(this->passiveid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FillData.passiveid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->passiveid(), target);
  }

  // uint32 price = 30;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->price(), target);
  }

  // uint32 qty = 40;
  if (this->qty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->qty(), target);
  }

  // int32 agressive_side = 50;
  if (this->agressive_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->agressive_side(), target);
  }

  // uint64 microtime = 60;
  if (this->microtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->microtime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FillData)
  return target;
}

size_t FillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FillData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string agressiveid = 10;
  if (this->agressiveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->agressiveid());
  }

  // string passiveid = 20;
  if (this->passiveid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passiveid());
  }

  // int32 agressive_side = 50;
  if (this->agressive_side() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agressive_side());
  }

  // uint32 price = 30;
  if (this->price() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  // uint32 qty = 40;
  if (this->qty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qty());
  }

  // uint64 microtime = 60;
  if (this->microtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->microtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FillData)
  GOOGLE_DCHECK_NE(&from, this);
  const FillData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FillData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FillData)
    MergeFrom(*source);
  }
}

void FillData::MergeFrom(const FillData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FillData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agressiveid().size() > 0) {

    agressiveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agressiveid_);
  }
  if (from.passiveid().size() > 0) {

    passiveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passiveid_);
  }
  if (from.agressive_side() != 0) {
    set_agressive_side(from.agressive_side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.qty() != 0) {
    set_qty(from.qty());
  }
  if (from.microtime() != 0) {
    set_microtime(from.microtime());
  }
}

void FillData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillData::CopyFrom(const FillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillData::IsInitialized() const {
  return true;
}

void FillData::Swap(FillData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillData::InternalSwap(FillData* other) {
  using std::swap;
  agressiveid_.Swap(&other->agressiveid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passiveid_.Swap(&other->passiveid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agressive_side_, other->agressive_side_);
  swap(price_, other->price_);
  swap(qty_, other->qty_);
  swap(microtime_, other->microtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FillData::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderData::kVersionFieldNumber;
const int OrderData::kEpochFieldNumber;
const int OrderData::kBookordersFieldNumber;
const int OrderData::kFillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderData::OrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_OrderData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderData)
}
OrderData::OrderData(const OrderData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bookorders_(from.bookorders_),
      fills_(from.fills_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&version_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:OrderData)
}

void OrderData::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&version_)) + sizeof(epoch_));
}

OrderData::~OrderData() {
  // @@protoc_insertion_point(destructor:OrderData)
  SharedDtor();
}

void OrderData::SharedDtor() {
}

void OrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderData::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderData& OrderData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_OrderData.base);
  return *internal_default_instance();
}


void OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookorders_.Clear();
  fills_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&version_)) + sizeof(epoch_));
  _internal_metadata_.Clear();
}

bool OrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrderData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BookOrder bookorders = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bookorders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FillData fills = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderData)
  return false;
#undef DO_
}

void OrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->epoch(), output);
  }

  // repeated .BookOrder bookorders = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookorders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40,
      this->bookorders(static_cast<int>(i)),
      output);
  }

  // repeated .FillData fills = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50,
      this->fills(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OrderData)
}

::google::protobuf::uint8* OrderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OrderData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->epoch(), target);
  }

  // repeated .BookOrder bookorders = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bookorders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->bookorders(static_cast<int>(i)), deterministic, target);
  }

  // repeated .FillData fills = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->fills(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrderData)
  return target;
}

size_t OrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OrderData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .BookOrder bookorders = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->bookorders_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bookorders(static_cast<int>(i)));
    }
  }

  // repeated .FillData fills = 50;
  {
    unsigned int count = static_cast<unsigned int>(this->fills_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fills(static_cast<int>(i)));
    }
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // uint64 epoch = 10;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OrderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OrderData)
    MergeFrom(*source);
  }
}

void OrderData::MergeFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OrderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bookorders_.MergeFrom(from.bookorders_);
  fills_.MergeFrom(from.fills_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void OrderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderData::CopyFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderData::IsInitialized() const {
  return true;
}

void OrderData::Swap(OrderData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderData::InternalSwap(OrderData* other) {
  using std::swap;
  CastToBase(&bookorders_)->InternalSwap(CastToBase(&other->bookorders_));
  CastToBase(&fills_)->InternalSwap(CastToBase(&other->fills_));
  swap(version_, other->version_);
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderData::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Contract::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contract::kSymbolFieldNumber;
const int Contract::kUnitSizeFieldNumber;
const int Contract::kUnitFieldNumber;
const int Contract::kPriceQuoteFieldNumber;
const int Contract::kPriceQuoteUnitsFieldNumber;
const int Contract::kTicMinFieldNumber;
const int Contract::kTicValueFieldNumber;
const int Contract::kPriceLimitPercentFieldNumber;
const int Contract::kInitialMarginFieldNumber;
const int Contract::kMaintMarginFieldNumber;
const int Contract::kPositionLimitsFieldNumber;
const int Contract::kTradingOpenTimeFieldNumber;
const int Contract::kTradingCloseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contract::Contract()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_Contract.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Contract)
}
Contract::Contract(const Contract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  price_quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_quote().size() > 0) {
    price_quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_quote_);
  }
  ::memcpy(&unit_size_, &from.unit_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&trading_close_time_) -
    reinterpret_cast<char*>(&unit_size_)) + sizeof(trading_close_time_));
  // @@protoc_insertion_point(copy_constructor:Contract)
}

void Contract::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unit_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_close_time_) -
      reinterpret_cast<char*>(&unit_size_)) + sizeof(trading_close_time_));
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:Contract)
  SharedDtor();
}

void Contract::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Contract::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Contract& Contract::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_Contract.base);
  return *internal_default_instance();
}


void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:Contract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unit_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_close_time_) -
      reinterpret_cast<char*>(&unit_size_)) + sizeof(trading_close_time_));
  _internal_metadata_.Clear();
}

bool Contract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Contract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Contract.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unit_size = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), static_cast<int>(this->unit().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Contract.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_quote = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_quote().data(), static_cast<int>(this->price_quote().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Contract.price_quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price_quote_units = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_quote_units_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tic_min = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tic_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tic_value = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tic_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price_limit_percent = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_limit_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 initial_margin = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initial_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 maint_margin = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maint_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position_limits = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trading_open_time = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 960 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trading_open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trading_close_time = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1040 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trading_close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Contract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Contract)
  return false;
#undef DO_
}

void Contract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Contract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 10;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->symbol(), output);
  }

  // uint32 unit_size = 20;
  if (this->unit_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->unit_size(), output);
  }

  // string unit = 30;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->unit(), output);
  }

  // string price_quote = 40;
  if (this->price_quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_quote().data(), static_cast<int>(this->price_quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.price_quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->price_quote(), output);
  }

  // int32 price_quote_units = 50;
  if (this->price_quote_units() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->price_quote_units(), output);
  }

  // uint32 tic_min = 60;
  if (this->tic_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->tic_min(), output);
  }

  // uint32 tic_value = 70;
  if (this->tic_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->tic_value(), output);
  }

  // int32 price_limit_percent = 80;
  if (this->price_limit_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->price_limit_percent(), output);
  }

  // uint64 initial_margin = 90;
  if (this->initial_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(90, this->initial_margin(), output);
  }

  // uint64 maint_margin = 100;
  if (this->maint_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->maint_margin(), output);
  }

  // int32 position_limits = 110;
  if (this->position_limits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->position_limits(), output);
  }

  // uint64 trading_open_time = 120;
  if (this->trading_open_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(120, this->trading_open_time(), output);
  }

  // uint64 trading_close_time = 130;
  if (this->trading_close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(130, this->trading_close_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Contract)
}

::google::protobuf::uint8* Contract::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Contract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 10;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // uint32 unit_size = 20;
  if (this->unit_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->unit_size(), target);
  }

  // string unit = 30;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->unit(), target);
  }

  // string price_quote = 40;
  if (this->price_quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_quote().data(), static_cast<int>(this->price_quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contract.price_quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->price_quote(), target);
  }

  // int32 price_quote_units = 50;
  if (this->price_quote_units() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->price_quote_units(), target);
  }

  // uint32 tic_min = 60;
  if (this->tic_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->tic_min(), target);
  }

  // uint32 tic_value = 70;
  if (this->tic_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->tic_value(), target);
  }

  // int32 price_limit_percent = 80;
  if (this->price_limit_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->price_limit_percent(), target);
  }

  // uint64 initial_margin = 90;
  if (this->initial_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(90, this->initial_margin(), target);
  }

  // uint64 maint_margin = 100;
  if (this->maint_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->maint_margin(), target);
  }

  // int32 position_limits = 110;
  if (this->position_limits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->position_limits(), target);
  }

  // uint64 trading_open_time = 120;
  if (this->trading_open_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(120, this->trading_open_time(), target);
  }

  // uint64 trading_close_time = 130;
  if (this->trading_close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(130, this->trading_close_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Contract)
  return target;
}

size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Contract)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string symbol = 10;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string unit = 30;
  if (this->unit().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // string price_quote = 40;
  if (this->price_quote().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_quote());
  }

  // uint32 unit_size = 20;
  if (this->unit_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unit_size());
  }

  // int32 price_quote_units = 50;
  if (this->price_quote_units() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price_quote_units());
  }

  // uint32 tic_min = 60;
  if (this->tic_min() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tic_min());
  }

  // uint32 tic_value = 70;
  if (this->tic_value() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tic_value());
  }

  // uint64 initial_margin = 90;
  if (this->initial_margin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->initial_margin());
  }

  // int32 price_limit_percent = 80;
  if (this->price_limit_percent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price_limit_percent());
  }

  // int32 position_limits = 110;
  if (this->position_limits() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position_limits());
  }

  // uint64 maint_margin = 100;
  if (this->maint_margin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maint_margin());
  }

  // uint64 trading_open_time = 120;
  if (this->trading_open_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trading_open_time());
  }

  // uint64 trading_close_time = 130;
  if (this->trading_close_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trading_close_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Contract>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Contract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Contract)
    MergeFrom(*source);
  }
}

void Contract::MergeFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.price_quote().size() > 0) {

    price_quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_quote_);
  }
  if (from.unit_size() != 0) {
    set_unit_size(from.unit_size());
  }
  if (from.price_quote_units() != 0) {
    set_price_quote_units(from.price_quote_units());
  }
  if (from.tic_min() != 0) {
    set_tic_min(from.tic_min());
  }
  if (from.tic_value() != 0) {
    set_tic_value(from.tic_value());
  }
  if (from.initial_margin() != 0) {
    set_initial_margin(from.initial_margin());
  }
  if (from.price_limit_percent() != 0) {
    set_price_limit_percent(from.price_limit_percent());
  }
  if (from.position_limits() != 0) {
    set_position_limits(from.position_limits());
  }
  if (from.maint_margin() != 0) {
    set_maint_margin(from.maint_margin());
  }
  if (from.trading_open_time() != 0) {
    set_trading_open_time(from.trading_open_time());
  }
  if (from.trading_close_time() != 0) {
    set_trading_close_time(from.trading_close_time());
  }
}

void Contract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::Swap(Contract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contract::InternalSwap(Contract* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  price_quote_.Swap(&other->price_quote_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unit_size_, other->unit_size_);
  swap(price_quote_units_, other->price_quote_units_);
  swap(tic_min_, other->tic_min_);
  swap(tic_value_, other->tic_value_);
  swap(initial_margin_, other->initial_margin_);
  swap(price_limit_percent_, other->price_limit_percent_);
  swap(position_limits_, other->position_limits_);
  swap(maint_margin_, other->maint_margin_);
  swap(trading_open_time_, other->trading_open_time_);
  swap(trading_close_time_, other->trading_close_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Contract::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Product::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Product::kTickerFieldNumber;
const int Product::kContractSymbolFieldNumber;
const int Product::kExpirationDateFieldNumber;
const int Product::kStartTradingDateFieldNumber;
const int Product::kIsActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Product::Product()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_Product.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Product)
}
Product::Product(const Product& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contract_symbol().size() > 0) {
    contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
  }
  ::memcpy(&is_active_, &from.is_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_trading_date_) -
    reinterpret_cast<char*>(&is_active_)) + sizeof(start_trading_date_));
  // @@protoc_insertion_point(copy_constructor:Product)
}

void Product::SharedCtor() {
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_trading_date_) -
      reinterpret_cast<char*>(&is_active_)) + sizeof(start_trading_date_));
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:Product)
  SharedDtor();
}

void Product::SharedDtor() {
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Product::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Product& Product::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_Product.base);
  return *internal_default_instance();
}


void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contract_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_trading_date_) -
      reinterpret_cast<char*>(&is_active_)) + sizeof(start_trading_date_));
  _internal_metadata_.Clear();
}

bool Product::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Product)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticker = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Product.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contract_symbol = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Product.contract_symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expiration_date = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_trading_date = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_trading_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Product)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Product)
  return false;
#undef DO_
}

void Product::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Product.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ticker(), output);
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Product.contract_symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->contract_symbol(), output);
  }

  // uint64 expiration_date = 30;
  if (this->expiration_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->expiration_date(), output);
  }

  // uint64 start_trading_date = 40;
  if (this->start_trading_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->start_trading_date(), output);
  }

  // bool is_active = 50;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->is_active(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Product)
}

::google::protobuf::uint8* Product::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 10;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Product.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ticker(), target);
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contract_symbol().data(), static_cast<int>(this->contract_symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Product.contract_symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->contract_symbol(), target);
  }

  // uint64 expiration_date = 30;
  if (this->expiration_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->expiration_date(), target);
  }

  // uint64 start_trading_date = 40;
  if (this->start_trading_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->start_trading_date(), target);
  }

  // bool is_active = 50;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->is_active(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Product)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ticker = 10;
  if (this->ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // string contract_symbol = 20;
  if (this->contract_symbol().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contract_symbol());
  }

  // bool is_active = 50;
  if (this->is_active() != 0) {
    total_size += 2 + 1;
  }

  // uint64 expiration_date = 30;
  if (this->expiration_date() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expiration_date());
  }

  // uint64 start_trading_date = 40;
  if (this->start_trading_date() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_trading_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Product::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  const Product* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Product>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Product)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Product)
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.contract_symbol().size() > 0) {

    contract_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contract_symbol_);
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.expiration_date() != 0) {
    set_expiration_date(from.expiration_date());
  }
  if (from.start_trading_date() != 0) {
    set_start_trading_date(from.start_trading_date());
  }
}

void Product::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::Swap(Product* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Product::InternalSwap(Product* other) {
  using std::swap;
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_symbol_.Swap(&other->contract_symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_active_, other->is_active_);
  swap(expiration_date_, other->expiration_date_);
  swap(start_trading_date_, other->start_trading_date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Product::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kDateFieldNumber;
const int Schedule::kTradingOpenTimeFieldNumber;
const int Schedule::kTradingCloseTimeFieldNumber;
const int Schedule::kProductFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_Schedule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      product_(from.product_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&trading_close_time_) -
    reinterpret_cast<char*>(&date_)) + sizeof(trading_close_time_));
  // @@protoc_insertion_point(copy_constructor:Schedule)
}

void Schedule::SharedCtor() {
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_close_time_) -
      reinterpret_cast<char*>(&date_)) + sizeof(trading_close_time_));
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
}

void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule& Schedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_Schedule.base);
  return *internal_default_instance();
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_.Clear();
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trading_close_time_) -
      reinterpret_cast<char*>(&date_)) + sizeof(trading_close_time_));
  _internal_metadata_.Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Schedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 date = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trading_open_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trading_open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trading_close_time = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trading_close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string product = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product(this->product_size() - 1).data(),
            static_cast<int>(this->product(this->product_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Schedule.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 date = 10;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->date(), output);
  }

  // uint64 trading_open_time = 20;
  if (this->trading_open_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->trading_open_time(), output);
  }

  // uint64 trading_close_time = 30;
  if (this->trading_close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->trading_close_time(), output);
  }

  // repeated string product = 40;
  for (int i = 0, n = this->product_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product(i).data(), static_cast<int>(this->product(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Schedule.product");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->product(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 date = 10;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->date(), target);
  }

  // uint64 trading_open_time = 20;
  if (this->trading_open_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->trading_open_time(), target);
  }

  // uint64 trading_close_time = 30;
  if (this->trading_close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->trading_close_time(), target);
  }

  // repeated string product = 40;
  for (int i = 0, n = this->product_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product(i).data(), static_cast<int>(this->product(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Schedule.product");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(40, this->product(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Schedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string product = 40;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->product_size());
  for (int i = 0, n = this->product_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->product(i));
  }

  // uint64 date = 10;
  if (this->date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->date());
  }

  // uint64 trading_open_time = 20;
  if (this->trading_open_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trading_open_time());
  }

  // uint64 trading_close_time = 30;
  if (this->trading_close_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trading_close_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  product_.MergeFrom(from.product_);
  if (from.date() != 0) {
    set_date(from.date());
  }
  if (from.trading_open_time() != 0) {
    set_trading_open_time(from.trading_open_time());
  }
  if (from.trading_close_time() != 0) {
    set_trading_close_time(from.trading_close_time());
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  product_.InternalSwap(CastToBase(&other->product_));
  swap(date_, other->date_);
  swap(trading_open_time_, other->trading_open_time_);
  swap(trading_close_time_, other->trading_close_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradingSession::InitAsDefaultInstance() {
  ::_TradingSession_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::Schedule*>(
      ::Schedule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingSession::kSessionIdFieldNumber;
const int TradingSession::kScheduleFieldNumber;
const int TradingSession::kPrevSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingSession::TradingSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_TradingSession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TradingSession)
}
TradingSession::TradingSession(const TradingSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  prev_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prev_session_id().size() > 0) {
    prev_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_session_id_);
  }
  if (from.has_schedule()) {
    schedule_ = new ::Schedule(*from.schedule_);
  } else {
    schedule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TradingSession)
}

void TradingSession::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_ = NULL;
}

TradingSession::~TradingSession() {
  // @@protoc_insertion_point(destructor:TradingSession)
  SharedDtor();
}

void TradingSession::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schedule_;
}

void TradingSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradingSession::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradingSession& TradingSession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_TradingSession.base);
  return *internal_default_instance();
}


void TradingSession::Clear() {
// @@protoc_insertion_point(message_clear_start:TradingSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) {
    delete schedule_;
  }
  schedule_ = NULL;
  _internal_metadata_.Clear();
}

bool TradingSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TradingSession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TradingSession.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Schedule schedule = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_session_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_session_id().data(), static_cast<int>(this->prev_session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TradingSession.prev_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TradingSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TradingSession)
  return false;
#undef DO_
}

void TradingSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TradingSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 10;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TradingSession.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->session_id(), output);
  }

  // .Schedule schedule = 20;
  if (this->has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_schedule(), output);
  }

  // string prev_session_id = 50;
  if (this->prev_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_session_id().data(), static_cast<int>(this->prev_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TradingSession.prev_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->prev_session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TradingSession)
}

::google::protobuf::uint8* TradingSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TradingSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 10;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TradingSession.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session_id(), target);
  }

  // .Schedule schedule = 20;
  if (this->has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_schedule(), deterministic, target);
  }

  // string prev_session_id = 50;
  if (this->prev_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_session_id().data(), static_cast<int>(this->prev_session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TradingSession.prev_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->prev_session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TradingSession)
  return target;
}

size_t TradingSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TradingSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 10;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string prev_session_id = 50;
  if (this->prev_session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_session_id());
  }

  // .Schedule schedule = 20;
  if (this->has_schedule()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TradingSession)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradingSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TradingSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TradingSession)
    MergeFrom(*source);
  }
}

void TradingSession::MergeFrom(const TradingSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TradingSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.prev_session_id().size() > 0) {

    prev_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_session_id_);
  }
  if (from.has_schedule()) {
    mutable_schedule()->::Schedule::MergeFrom(from.schedule());
  }
}

void TradingSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TradingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSession::CopyFrom(const TradingSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TradingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSession::IsInitialized() const {
  return true;
}

void TradingSession::Swap(TradingSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingSession::InternalSwap(TradingSession* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_session_id_.Swap(&other->prev_session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schedule_, other->schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradingSession::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStatus::kEstateFieldNumber;
const int SessionStatus::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStatus::SessionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_SessionStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SessionStatus)
}
SessionStatus::SessionStatus(const SessionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  estate_ = from.estate_;
  // @@protoc_insertion_point(copy_constructor:SessionStatus)
}

void SessionStatus::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estate_ = 0;
}

SessionStatus::~SessionStatus() {
  // @@protoc_insertion_point(destructor:SessionStatus)
  SharedDtor();
}

void SessionStatus::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionStatus::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionStatus& SessionStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_SessionStatus.base);
  return *internal_default_instance();
}


void SessionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SessionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estate_ = 0;
  _internal_metadata_.Clear();
}

bool SessionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SessionStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ExchangeState estate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_estate(static_cast< ::ExchangeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SessionStatus.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SessionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SessionStatus)
  return false;
#undef DO_
}

void SessionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SessionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExchangeState estate = 10;
  if (this->estate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->estate(), output);
  }

  // string session_id = 20;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SessionStatus.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SessionStatus)
}

::google::protobuf::uint8* SessionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SessionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExchangeState estate = 10;
  if (this->estate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->estate(), target);
  }

  // string session_id = 20;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SessionStatus.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SessionStatus)
  return target;
}

size_t SessionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SessionStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 20;
  if (this->session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // .ExchangeState estate = 10;
  if (this->estate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->estate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SessionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SessionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SessionStatus)
    MergeFrom(*source);
  }
}

void SessionStatus::MergeFrom(const SessionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SessionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.estate() != 0) {
    set_estate(from.estate());
  }
}

void SessionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SessionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionStatus::CopyFrom(const SessionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SessionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStatus::IsInitialized() const {
  return true;
}

void SessionStatus::Swap(SessionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionStatus::InternalSwap(SessionStatus* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(estate_, other->estate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionStatus::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeStatus::InitAsDefaultInstance() {
  ::_ExchangeStatus_default_instance_._instance.get_mutable()->session_ = const_cast< ::TradingSession*>(
      ::TradingSession::internal_default_instance());
  ::_ExchangeStatus_default_instance_._instance.get_mutable()->status_ = const_cast< ::SessionStatus*>(
      ::SessionStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeStatus::kSessionFieldNumber;
const int ExchangeStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeStatus::ExchangeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExchangeStatus)
}
ExchangeStatus::ExchangeStatus(const ExchangeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session()) {
    session_ = new ::TradingSession(*from.session_);
  } else {
    session_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::SessionStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ExchangeStatus)
}

void ExchangeStatus::SharedCtor() {
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&session_)) + sizeof(status_));
}

ExchangeStatus::~ExchangeStatus() {
  // @@protoc_insertion_point(destructor:ExchangeStatus)
  SharedDtor();
}

void ExchangeStatus::SharedDtor() {
  if (this != internal_default_instance()) delete session_;
  if (this != internal_default_instance()) delete status_;
}

void ExchangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeStatus::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeStatus& ExchangeStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ExchangeStatus.base);
  return *internal_default_instance();
}


void ExchangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  _internal_metadata_.Clear();
}

bool ExchangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExchangeStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TradingSession session = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SessionStatus status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExchangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExchangeStatus)
  return false;
#undef DO_
}

void ExchangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TradingSession session = 10;
  if (this->has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_session(), output);
  }

  // .SessionStatus status = 20;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ExchangeStatus)
}

::google::protobuf::uint8* ExchangeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TradingSession session = 10;
  if (this->has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_session(), deterministic, target);
  }

  // .SessionStatus status = 20;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExchangeStatus)
  return target;
}

size_t ExchangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExchangeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .TradingSession session = 10;
  if (this->has_session()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *session_);
  }

  // .SessionStatus status = 20;
  if (this->has_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExchangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExchangeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExchangeStatus)
    MergeFrom(*source);
  }
}

void ExchangeStatus::MergeFrom(const ExchangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExchangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session()) {
    mutable_session()->::TradingSession::MergeFrom(from.session());
  }
  if (from.has_status()) {
    mutable_status()->::SessionStatus::MergeFrom(from.status());
  }
}

void ExchangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExchangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeStatus::CopyFrom(const ExchangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExchangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeStatus::IsInitialized() const {
  return true;
}

void ExchangeStatus::Swap(ExchangeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeStatus::InternalSwap(ExchangeStatus* other) {
  using std::swap;
  swap(session_, other->session_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeStatus::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveContractProduct::InitAsDefaultInstance() {
  ::_ActiveContractProduct_default_instance_._instance.get_mutable()->contract_ = const_cast< ::Contract*>(
      ::Contract::internal_default_instance());
  ::_ActiveContractProduct_default_instance_._instance.get_mutable()->product_ = const_cast< ::Product*>(
      ::Product::internal_default_instance());
  ::_ActiveContractProduct_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::Schedule*>(
      ::Schedule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveContractProduct::kContractFieldNumber;
const int ActiveContractProduct::kProductFieldNumber;
const int ActiveContractProduct::kScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveContractProduct::ActiveContractProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ActiveContractProduct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActiveContractProduct)
}
ActiveContractProduct::ActiveContractProduct(const ActiveContractProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_contract()) {
    contract_ = new ::Contract(*from.contract_);
  } else {
    contract_ = NULL;
  }
  if (from.has_product()) {
    product_ = new ::Product(*from.product_);
  } else {
    product_ = NULL;
  }
  if (from.has_schedule()) {
    schedule_ = new ::Schedule(*from.schedule_);
  } else {
    schedule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ActiveContractProduct)
}

void ActiveContractProduct::SharedCtor() {
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schedule_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(schedule_));
}

ActiveContractProduct::~ActiveContractProduct() {
  // @@protoc_insertion_point(destructor:ActiveContractProduct)
  SharedDtor();
}

void ActiveContractProduct::SharedDtor() {
  if (this != internal_default_instance()) delete contract_;
  if (this != internal_default_instance()) delete product_;
  if (this != internal_default_instance()) delete schedule_;
}

void ActiveContractProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActiveContractProduct::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveContractProduct& ActiveContractProduct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ActiveContractProduct.base);
  return *internal_default_instance();
}


void ActiveContractProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:ActiveContractProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && contract_ != NULL) {
    delete contract_;
  }
  contract_ = NULL;
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
  if (GetArenaNoVirtual() == NULL && schedule_ != NULL) {
    delete schedule_;
  }
  schedule_ = NULL;
  _internal_metadata_.Clear();
}

bool ActiveContractProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActiveContractProduct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Contract contract = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Product product = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Schedule schedule = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActiveContractProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActiveContractProduct)
  return false;
#undef DO_
}

void ActiveContractProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActiveContractProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Contract contract = 10;
  if (this->has_contract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_contract(), output);
  }

  // .Product product = 20;
  if (this->has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_product(), output);
  }

  // .Schedule schedule = 30;
  if (this->has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_schedule(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ActiveContractProduct)
}

::google::protobuf::uint8* ActiveContractProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActiveContractProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Contract contract = 10;
  if (this->has_contract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_contract(), deterministic, target);
  }

  // .Product product = 20;
  if (this->has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_product(), deterministic, target);
  }

  // .Schedule schedule = 30;
  if (this->has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_schedule(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveContractProduct)
  return target;
}

size_t ActiveContractProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActiveContractProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Contract contract = 10;
  if (this->has_contract()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *contract_);
  }

  // .Product product = 20;
  if (this->has_product()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_);
  }

  // .Schedule schedule = 30;
  if (this->has_schedule()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveContractProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActiveContractProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveContractProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveContractProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActiveContractProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActiveContractProduct)
    MergeFrom(*source);
  }
}

void ActiveContractProduct::MergeFrom(const ActiveContractProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActiveContractProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_contract()) {
    mutable_contract()->::Contract::MergeFrom(from.contract());
  }
  if (from.has_product()) {
    mutable_product()->::Product::MergeFrom(from.product());
  }
  if (from.has_schedule()) {
    mutable_schedule()->::Schedule::MergeFrom(from.schedule());
  }
}

void ActiveContractProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActiveContractProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveContractProduct::CopyFrom(const ActiveContractProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActiveContractProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveContractProduct::IsInitialized() const {
  return true;
}

void ActiveContractProduct::Swap(ActiveContractProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveContractProduct::InternalSwap(ActiveContractProduct* other) {
  using std::swap;
  swap(contract_, other->contract_);
  swap(product_, other->product_);
  swap(schedule_, other->schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActiveContractProduct::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kPositionFieldNumber;
const int Position::kAvgPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_price_) -
    reinterpret_cast<char*>(&position_)) + sizeof(avg_price_));
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_price_) -
      reinterpret_cast<char*>(&position_)) + sizeof(avg_price_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_price_) -
      reinterpret_cast<char*>(&position_)) + sizeof(avg_price_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avg_price = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 position = 10;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->position(), output);
  }

  // uint32 avg_price = 20;
  if (this->avg_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->avg_price(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 position = 10;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->position(), target);
  }

  // uint32 avg_price = 20;
  if (this->avg_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->avg_price(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sint32 position = 10;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->position());
  }

  // uint32 avg_price = 20;
  if (this->avg_price() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avg_price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.avg_price() != 0) {
    set_avg_price(from.avg_price());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(avg_price_, other->avg_price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderFills::InitAsDefaultInstance() {
  ::_OrderFills_default_instance_._instance.get_mutable()->order_ = const_cast< ::BookOrder*>(
      ::BookOrder::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderFills::kOrderFieldNumber;
const int OrderFills::kFillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderFills::OrderFills()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_OrderFills.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderFills)
}
OrderFills::OrderFills(const OrderFills& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fills_(from.fills_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::BookOrder(*from.order_);
  } else {
    order_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:OrderFills)
}

void OrderFills::SharedCtor() {
  order_ = NULL;
}

OrderFills::~OrderFills() {
  // @@protoc_insertion_point(destructor:OrderFills)
  SharedDtor();
}

void OrderFills::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void OrderFills::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderFills::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderFills& OrderFills::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_OrderFills.base);
  return *internal_default_instance();
}


void OrderFills::Clear() {
// @@protoc_insertion_point(message_clear_start:OrderFills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fills_.Clear();
  if (GetArenaNoVirtual() == NULL && order_ != NULL) {
    delete order_;
  }
  order_ = NULL;
  _internal_metadata_.Clear();
}

bool OrderFills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrderFills)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BookOrder order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FillData fills = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrderFills)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderFills)
  return false;
#undef DO_
}

void OrderFills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderFills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BookOrder order = 10;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_order(), output);
  }

  // repeated .FillData fills = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fills_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50,
      this->fills(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OrderFills)
}

::google::protobuf::uint8* OrderFills::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OrderFills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BookOrder order = 10;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_order(), deterministic, target);
  }

  // repeated .FillData fills = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fills_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->fills(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrderFills)
  return target;
}

size_t OrderFills::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OrderFills)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .FillData fills = 50;
  {
    unsigned int count = static_cast<unsigned int>(this->fills_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fills(static_cast<int>(i)));
    }
  }

  // .BookOrder order = 10;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderFills::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OrderFills)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderFills* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderFills>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OrderFills)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OrderFills)
    MergeFrom(*source);
  }
}

void OrderFills::MergeFrom(const OrderFills& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OrderFills)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fills_.MergeFrom(from.fills_);
  if (from.has_order()) {
    mutable_order()->::BookOrder::MergeFrom(from.order());
  }
}

void OrderFills::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OrderFills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderFills::CopyFrom(const OrderFills& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OrderFills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFills::IsInitialized() const {
  return true;
}

void OrderFills::Swap(OrderFills* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderFills::InternalSwap(OrderFills* other) {
  using std::swap;
  CastToBase(&fills_)->InternalSwap(CastToBase(&other->fills_));
  swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderFills::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

AccountState_PositionsEntry_DoNotUse::AccountState_PositionsEntry_DoNotUse() {}
AccountState_PositionsEntry_DoNotUse::AccountState_PositionsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void AccountState_PositionsEntry_DoNotUse::MergeFrom(const AccountState_PositionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AccountState_PositionsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[25];
}
void AccountState_PositionsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void AccountState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountState::kSidepitIdFieldNumber;
const int AccountState::kPubkeyFieldNumber;
const int AccountState::kNetLockedFieldNumber;
const int AccountState::kPendingUnlockFieldNumber;
const int AccountState::kRealizedPnlFieldNumber;
const int AccountState::kUnrealizedPnlFieldNumber;
const int AccountState::kMarginRequiredFieldNumber;
const int AccountState::kAvailableBalanceFieldNumber;
const int AccountState::kAvailableMarginFieldNumber;
const int AccountState::kIsRestrictedFieldNumber;
const int AccountState::kReduceOnlyFieldNumber;
const int AccountState::kPositionsFieldNumber;
const int AccountState::kCarriedPositionFieldNumber;
const int AccountState::kNewPositionFieldNumber;
const int AccountState::kOpenBidsFieldNumber;
const int AccountState::kOpenAsksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountState::AccountState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_AccountState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AccountState)
}
AccountState::AccountState(const AccountState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positions_.MergeFrom(from.positions_);
  sidepit_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sidepit_id().size() > 0) {
    sidepit_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sidepit_id_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  ::memcpy(&net_locked_, &from.net_locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_asks_) -
    reinterpret_cast<char*>(&net_locked_)) + sizeof(open_asks_));
  // @@protoc_insertion_point(copy_constructor:AccountState)
}

void AccountState::SharedCtor() {
  sidepit_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&net_locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_asks_) -
      reinterpret_cast<char*>(&net_locked_)) + sizeof(open_asks_));
}

AccountState::~AccountState() {
  // @@protoc_insertion_point(destructor:AccountState)
  SharedDtor();
}

void AccountState::SharedDtor() {
  sidepit_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountState::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountState& AccountState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_AccountState.base);
  return *internal_default_instance();
}


void AccountState::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  sidepit_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&net_locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_asks_) -
      reinterpret_cast<char*>(&net_locked_)) + sizeof(open_asks_));
  _internal_metadata_.Clear();
}

bool AccountState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AccountState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sidepit_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sidepit_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AccountState.sidepit_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pubkey = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), static_cast<int>(this->pubkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AccountState.pubkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 net_locked = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pending_unlock = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realized_pnl = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realized_pnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unrealized_pnl = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unrealized_pnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 margin_required = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &margin_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 available_balance = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 available_margin = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_restricted = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reduce_only = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 896 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .Position> positions = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          AccountState_PositionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AccountState_PositionsEntry_DoNotUse,
              ::std::string, ::Position,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::Position > > parser(&positions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AccountState.PositionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 carried_position = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1040 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &carried_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 new_position = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 1120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &new_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_bids = 150;
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 1200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_bids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_asks = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 1280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_asks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AccountState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AccountState)
  return false;
#undef DO_
}

void AccountState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AccountState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sidepit_id = 10;
  if (this->sidepit_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AccountState.sidepit_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sidepit_id(), output);
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AccountState.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->pubkey(), output);
  }

  // int64 net_locked = 30;
  if (this->net_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->net_locked(), output);
  }

  // int64 pending_unlock = 40;
  if (this->pending_unlock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->pending_unlock(), output);
  }

  // int64 realized_pnl = 50;
  if (this->realized_pnl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->realized_pnl(), output);
  }

  // int64 unrealized_pnl = 60;
  if (this->unrealized_pnl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->unrealized_pnl(), output);
  }

  // int64 margin_required = 80;
  if (this->margin_required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(80, this->margin_required(), output);
  }

  // int64 available_balance = 90;
  if (this->available_balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(90, this->available_balance(), output);
  }

  // int64 available_margin = 100;
  if (this->available_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->available_margin(), output);
  }

  // bool is_restricted = 110;
  if (this->is_restricted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(110, this->is_restricted(), output);
  }

  // int32 reduce_only = 112;
  if (this->reduce_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->reduce_only(), output);
  }

  // map<string, .Position> positions = 120;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Position >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "AccountState.PositionsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Position >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Position >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AccountState_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            120, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AccountState_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::Position >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            120, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // sint32 carried_position = 130;
  if (this->carried_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(130, this->carried_position(), output);
  }

  // sint32 new_position = 140;
  if (this->new_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(140, this->new_position(), output);
  }

  // int32 open_bids = 150;
  if (this->open_bids() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(150, this->open_bids(), output);
  }

  // int32 open_asks = 160;
  if (this->open_asks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(160, this->open_asks(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AccountState)
}

::google::protobuf::uint8* AccountState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AccountState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sidepit_id = 10;
  if (this->sidepit_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sidepit_id().data(), static_cast<int>(this->sidepit_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AccountState.sidepit_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sidepit_id(), target);
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AccountState.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pubkey(), target);
  }

  // int64 net_locked = 30;
  if (this->net_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->net_locked(), target);
  }

  // int64 pending_unlock = 40;
  if (this->pending_unlock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->pending_unlock(), target);
  }

  // int64 realized_pnl = 50;
  if (this->realized_pnl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->realized_pnl(), target);
  }

  // int64 unrealized_pnl = 60;
  if (this->unrealized_pnl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->unrealized_pnl(), target);
  }

  // int64 margin_required = 80;
  if (this->margin_required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(80, this->margin_required(), target);
  }

  // int64 available_balance = 90;
  if (this->available_balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(90, this->available_balance(), target);
  }

  // int64 available_margin = 100;
  if (this->available_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->available_margin(), target);
  }

  // bool is_restricted = 110;
  if (this->is_restricted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(110, this->is_restricted(), target);
  }

  // int32 reduce_only = 112;
  if (this->reduce_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->reduce_only(), target);
  }

  // map<string, .Position> positions = 120;
  if (!this->positions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Position >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "AccountState.PositionsEntry.key");
      }
    };

    if (deterministic &&
        this->positions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->positions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Position >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Position >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AccountState_PositionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(positions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       120, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AccountState_PositionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::Position >::const_iterator
          it = this->positions().begin();
          it != this->positions().end(); ++it) {
        entry.reset(positions_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       120, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // sint32 carried_position = 130;
  if (this->carried_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(130, this->carried_position(), target);
  }

  // sint32 new_position = 140;
  if (this->new_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(140, this->new_position(), target);
  }

  // int32 open_bids = 150;
  if (this->open_bids() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(150, this->open_bids(), target);
  }

  // int32 open_asks = 160;
  if (this->open_asks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(160, this->open_asks(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountState)
  return target;
}

size_t AccountState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .Position> positions = 120;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->positions_size());
  {
    ::std::unique_ptr<AccountState_PositionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::Position >::const_iterator
        it = this->positions().begin();
        it != this->positions().end(); ++it) {
      entry.reset(positions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string sidepit_id = 10;
  if (this->sidepit_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sidepit_id());
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  // int64 net_locked = 30;
  if (this->net_locked() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_locked());
  }

  // int64 pending_unlock = 40;
  if (this->pending_unlock() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pending_unlock());
  }

  // int64 realized_pnl = 50;
  if (this->realized_pnl() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realized_pnl());
  }

  // int64 unrealized_pnl = 60;
  if (this->unrealized_pnl() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->unrealized_pnl());
  }

  // int64 margin_required = 80;
  if (this->margin_required() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->margin_required());
  }

  // int64 available_balance = 90;
  if (this->available_balance() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->available_balance());
  }

  // int64 available_margin = 100;
  if (this->available_margin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->available_margin());
  }

  // bool is_restricted = 110;
  if (this->is_restricted() != 0) {
    total_size += 2 + 1;
  }

  // int32 reduce_only = 112;
  if (this->reduce_only() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reduce_only());
  }

  // sint32 carried_position = 130;
  if (this->carried_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->carried_position());
  }

  // sint32 new_position = 140;
  if (this->new_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->new_position());
  }

  // int32 open_bids = 150;
  if (this->open_bids() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_bids());
  }

  // int32 open_asks = 160;
  if (this->open_asks() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_asks());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccountState)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccountState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccountState)
    MergeFrom(*source);
  }
}

void AccountState::MergeFrom(const AccountState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccountState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.sidepit_id().size() > 0) {

    sidepit_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sidepit_id_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.net_locked() != 0) {
    set_net_locked(from.net_locked());
  }
  if (from.pending_unlock() != 0) {
    set_pending_unlock(from.pending_unlock());
  }
  if (from.realized_pnl() != 0) {
    set_realized_pnl(from.realized_pnl());
  }
  if (from.unrealized_pnl() != 0) {
    set_unrealized_pnl(from.unrealized_pnl());
  }
  if (from.margin_required() != 0) {
    set_margin_required(from.margin_required());
  }
  if (from.available_balance() != 0) {
    set_available_balance(from.available_balance());
  }
  if (from.available_margin() != 0) {
    set_available_margin(from.available_margin());
  }
  if (from.is_restricted() != 0) {
    set_is_restricted(from.is_restricted());
  }
  if (from.reduce_only() != 0) {
    set_reduce_only(from.reduce_only());
  }
  if (from.carried_position() != 0) {
    set_carried_position(from.carried_position());
  }
  if (from.new_position() != 0) {
    set_new_position(from.new_position());
  }
  if (from.open_bids() != 0) {
    set_open_bids(from.open_bids());
  }
  if (from.open_asks() != 0) {
    set_open_asks(from.open_asks());
  }
}

void AccountState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountState::CopyFrom(const AccountState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountState::IsInitialized() const {
  return true;
}

void AccountState::Swap(AccountState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountState::InternalSwap(AccountState* other) {
  using std::swap;
  positions_.Swap(&other->positions_);
  sidepit_id_.Swap(&other->sidepit_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(net_locked_, other->net_locked_);
  swap(pending_unlock_, other->pending_unlock_);
  swap(realized_pnl_, other->realized_pnl_);
  swap(unrealized_pnl_, other->unrealized_pnl_);
  swap(margin_required_, other->margin_required_);
  swap(available_balance_, other->available_balance_);
  swap(available_margin_, other->available_margin_);
  swap(is_restricted_, other->is_restricted_);
  swap(reduce_only_, other->reduce_only_);
  swap(carried_position_, other->carried_position_);
  swap(new_position_, other->new_position_);
  swap(open_bids_, other->open_bids_);
  swap(open_asks_, other->open_asks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountState::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BtcLocks::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BtcLocks::kTxidFieldNumber;
const int BtcLocks::kPubkeyFieldNumber;
const int BtcLocks::kBtcAddressFieldNumber;
const int BtcLocks::kLockSatsFieldNumber;
const int BtcLocks::kUnlockSatsFieldNumber;
const int BtcLocks::kIsPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BtcLocks::BtcLocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_BtcLocks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BtcLocks)
}
BtcLocks::BtcLocks(const BtcLocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txid().size() > 0) {
    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  btc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.btc_address().size() > 0) {
    btc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.btc_address_);
  }
  ::memcpy(&is_pending_, &from.is_pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_sats_) -
    reinterpret_cast<char*>(&is_pending_)) + sizeof(unlock_sats_));
  // @@protoc_insertion_point(copy_constructor:BtcLocks)
}

void BtcLocks::SharedCtor() {
  txid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btc_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_sats_) -
      reinterpret_cast<char*>(&is_pending_)) + sizeof(unlock_sats_));
}

BtcLocks::~BtcLocks() {
  // @@protoc_insertion_point(destructor:BtcLocks)
  SharedDtor();
}

void BtcLocks::SharedDtor() {
  txid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btc_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BtcLocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BtcLocks::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BtcLocks& BtcLocks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_BtcLocks.base);
  return *internal_default_instance();
}


void BtcLocks::Clear() {
// @@protoc_insertion_point(message_clear_start:BtcLocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btc_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_sats_) -
      reinterpret_cast<char*>(&is_pending_)) + sizeof(unlock_sats_));
  _internal_metadata_.Clear();
}

bool BtcLocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BtcLocks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txid().data(), static_cast<int>(this->txid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BtcLocks.txid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pubkey = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pubkey().data(), static_cast<int>(this->pubkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BtcLocks.pubkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string btc_address = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btc_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->btc_address().data(), static_cast<int>(this->btc_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BtcLocks.btc_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_sats = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 unlock_sats = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlock_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pending = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BtcLocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BtcLocks)
  return false;
#undef DO_
}

void BtcLocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BtcLocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txid = 10;
  if (this->txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txid().data(), static_cast<int>(this->txid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.txid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->txid(), output);
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.pubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->pubkey(), output);
  }

  // string btc_address = 30;
  if (this->btc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->btc_address().data(), static_cast<int>(this->btc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.btc_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->btc_address(), output);
  }

  // uint64 lock_sats = 40;
  if (this->lock_sats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->lock_sats(), output);
  }

  // uint64 unlock_sats = 50;
  if (this->unlock_sats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->unlock_sats(), output);
  }

  // bool is_pending = 60;
  if (this->is_pending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->is_pending(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BtcLocks)
}

::google::protobuf::uint8* BtcLocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BtcLocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txid = 10;
  if (this->txid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txid().data(), static_cast<int>(this->txid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.txid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->txid(), target);
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pubkey().data(), static_cast<int>(this->pubkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.pubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pubkey(), target);
  }

  // string btc_address = 30;
  if (this->btc_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->btc_address().data(), static_cast<int>(this->btc_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BtcLocks.btc_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->btc_address(), target);
  }

  // uint64 lock_sats = 40;
  if (this->lock_sats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->lock_sats(), target);
  }

  // uint64 unlock_sats = 50;
  if (this->unlock_sats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->unlock_sats(), target);
  }

  // bool is_pending = 60;
  if (this->is_pending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->is_pending(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BtcLocks)
  return target;
}

size_t BtcLocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BtcLocks)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txid = 10;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txid());
  }

  // string pubkey = 20;
  if (this->pubkey().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pubkey());
  }

  // string btc_address = 30;
  if (this->btc_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->btc_address());
  }

  // bool is_pending = 60;
  if (this->is_pending() != 0) {
    total_size += 2 + 1;
  }

  // uint64 lock_sats = 40;
  if (this->lock_sats() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_sats());
  }

  // uint64 unlock_sats = 50;
  if (this->unlock_sats() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unlock_sats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BtcLocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BtcLocks)
  GOOGLE_DCHECK_NE(&from, this);
  const BtcLocks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BtcLocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BtcLocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BtcLocks)
    MergeFrom(*source);
  }
}

void BtcLocks::MergeFrom(const BtcLocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BtcLocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.btc_address().size() > 0) {

    btc_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.btc_address_);
  }
  if (from.is_pending() != 0) {
    set_is_pending(from.is_pending());
  }
  if (from.lock_sats() != 0) {
    set_lock_sats(from.lock_sats());
  }
  if (from.unlock_sats() != 0) {
    set_unlock_sats(from.unlock_sats());
  }
}

void BtcLocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BtcLocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BtcLocks::CopyFrom(const BtcLocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BtcLocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtcLocks::IsInitialized() const {
  return true;
}

void BtcLocks::Swap(BtcLocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BtcLocks::InternalSwap(BtcLocks* other) {
  using std::swap;
  txid_.Swap(&other->txid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  btc_address_.Swap(&other->btc_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_pending_, other->is_pending_);
  swap(lock_sats_, other->lock_sats_);
  swap(unlock_sats_, other->unlock_sats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BtcLocks::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestReply::kTypeMaskFieldNumber;
const int RequestReply::kTraderidFieldNumber;
const int RequestReply::kTickerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestReply::RequestReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_RequestReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestReply)
}
RequestReply::RequestReply(const RequestReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traderid().size() > 0) {
    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticker().size() > 0) {
    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  typemask_ = from.typemask_;
  // @@protoc_insertion_point(copy_constructor:RequestReply)
}

void RequestReply::SharedCtor() {
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typemask_ = 0;
}

RequestReply::~RequestReply() {
  // @@protoc_insertion_point(destructor:RequestReply)
  SharedDtor();
}

void RequestReply::SharedDtor() {
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestReply::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestReply& RequestReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_RequestReply.base);
  return *internal_default_instance();
}


void RequestReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typemask_ = 0;
  _internal_metadata_.Clear();
}

bool RequestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TypeMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traderid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), static_cast<int>(this->traderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RequestReply.traderid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ticker = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticker().data(), static_cast<int>(this->ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RequestReply.ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestReply)
  return false;
#undef DO_
}

void RequestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeMask = 1;
  if (this->typemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typemask(), output);
  }

  // string traderid = 10;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestReply.traderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->traderid(), output);
  }

  // string ticker = 30;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestReply.ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ticker(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestReply)
}

::google::protobuf::uint8* RequestReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeMask = 1;
  if (this->typemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typemask(), target);
  }

  // string traderid = 10;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestReply.traderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->traderid(), target);
  }

  // string ticker = 30;
  if (this->ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticker().data(), static_cast<int>(this->ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestReply.ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ticker(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestReply)
  return target;
}

size_t RequestReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string traderid = 10;
  if (this->traderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // string ticker = 30;
  if (this->ticker().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticker());
  }

  // int32 TypeMask = 1;
  if (this->typemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typemask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestReply)
    MergeFrom(*source);
  }
}

void RequestReply::MergeFrom(const RequestReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.ticker().size() > 0) {

    ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticker_);
  }
  if (from.typemask() != 0) {
    set_typemask(from.typemask());
  }
}

void RequestReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestReply::CopyFrom(const RequestReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReply::IsInitialized() const {
  return true;
}

void RequestReply::Swap(RequestReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestReply::InternalSwap(RequestReply* other) {
  using std::swap;
  traderid_.Swap(&other->traderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticker_.Swap(&other->ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(typemask_, other->typemask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestReply::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplyRequest::InitAsDefaultInstance() {
  ::_ReplyRequest_default_instance_._instance.get_mutable()->trader_positions_ = const_cast< ::TraderPositionOrders*>(
      ::TraderPositionOrders::internal_default_instance());
  ::_ReplyRequest_default_instance_._instance.get_mutable()->active_product_ = const_cast< ::ActiveProduct*>(
      ::ActiveProduct::internal_default_instance());
  ::_ReplyRequest_default_instance_._instance.get_mutable()->market_data_ = const_cast< ::MarketData*>(
      ::MarketData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplyRequest::kTypeMaskFieldNumber;
const int ReplyRequest::kTraderPositionsFieldNumber;
const int ReplyRequest::kActiveProductFieldNumber;
const int ReplyRequest::kMarketDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplyRequest::ReplyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ReplyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReplyRequest)
}
ReplyRequest::ReplyRequest(const ReplyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trader_positions()) {
    trader_positions_ = new ::TraderPositionOrders(*from.trader_positions_);
  } else {
    trader_positions_ = NULL;
  }
  if (from.has_active_product()) {
    active_product_ = new ::ActiveProduct(*from.active_product_);
  } else {
    active_product_ = NULL;
  }
  if (from.has_market_data()) {
    market_data_ = new ::MarketData(*from.market_data_);
  } else {
    market_data_ = NULL;
  }
  typemask_ = from.typemask_;
  // @@protoc_insertion_point(copy_constructor:ReplyRequest)
}

void ReplyRequest::SharedCtor() {
  ::memset(&trader_positions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typemask_) -
      reinterpret_cast<char*>(&trader_positions_)) + sizeof(typemask_));
}

ReplyRequest::~ReplyRequest() {
  // @@protoc_insertion_point(destructor:ReplyRequest)
  SharedDtor();
}

void ReplyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete trader_positions_;
  if (this != internal_default_instance()) delete active_product_;
  if (this != internal_default_instance()) delete market_data_;
}

void ReplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReplyRequest::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplyRequest& ReplyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ReplyRequest.base);
  return *internal_default_instance();
}


void ReplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trader_positions_ != NULL) {
    delete trader_positions_;
  }
  trader_positions_ = NULL;
  if (GetArenaNoVirtual() == NULL && active_product_ != NULL) {
    delete active_product_;
  }
  active_product_ = NULL;
  if (GetArenaNoVirtual() == NULL && market_data_ != NULL) {
    delete market_data_;
  }
  market_data_ = NULL;
  typemask_ = 0;
  _internal_metadata_.Clear();
}

bool ReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReplyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TypeMask = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TraderPositionOrders trader_positions = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trader_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ActiveProduct active_product = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MarketData market_data = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_market_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReplyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReplyRequest)
  return false;
#undef DO_
}

void ReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeMask = 10;
  if (this->typemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->typemask(), output);
  }

  // .TraderPositionOrders trader_positions = 20;
  if (this->has_trader_positions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_trader_positions(), output);
  }

  // .ActiveProduct active_product = 30;
  if (this->has_active_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_active_product(), output);
  }

  // .MarketData market_data = 40;
  if (this->has_market_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_market_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ReplyRequest)
}

::google::protobuf::uint8* ReplyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeMask = 10;
  if (this->typemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->typemask(), target);
  }

  // .TraderPositionOrders trader_positions = 20;
  if (this->has_trader_positions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_trader_positions(), deterministic, target);
  }

  // .ActiveProduct active_product = 30;
  if (this->has_active_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_active_product(), deterministic, target);
  }

  // .MarketData market_data = 40;
  if (this->has_market_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_market_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReplyRequest)
  return target;
}

size_t ReplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReplyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .TraderPositionOrders trader_positions = 20;
  if (this->has_trader_positions()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trader_positions_);
  }

  // .ActiveProduct active_product = 30;
  if (this->has_active_product()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_product_);
  }

  // .MarketData market_data = 40;
  if (this->has_market_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *market_data_);
  }

  // int32 TypeMask = 10;
  if (this->typemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typemask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReplyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReplyRequest)
    MergeFrom(*source);
  }
}

void ReplyRequest::MergeFrom(const ReplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trader_positions()) {
    mutable_trader_positions()->::TraderPositionOrders::MergeFrom(from.trader_positions());
  }
  if (from.has_active_product()) {
    mutable_active_product()->::ActiveProduct::MergeFrom(from.active_product());
  }
  if (from.has_market_data()) {
    mutable_market_data()->::MarketData::MergeFrom(from.market_data());
  }
  if (from.typemask() != 0) {
    set_typemask(from.typemask());
  }
}

void ReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyRequest::CopyFrom(const ReplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyRequest::IsInitialized() const {
  return true;
}

void ReplyRequest::Swap(ReplyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplyRequest::InternalSwap(ReplyRequest* other) {
  using std::swap;
  swap(trader_positions_, other->trader_positions_);
  swap(active_product_, other->active_product_);
  swap(market_data_, other->market_data_);
  swap(typemask_, other->typemask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReplyRequest::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TraderPositionOrders_OrderfillsEntry_DoNotUse::TraderPositionOrders_OrderfillsEntry_DoNotUse() {}
TraderPositionOrders_OrderfillsEntry_DoNotUse::TraderPositionOrders_OrderfillsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TraderPositionOrders_OrderfillsEntry_DoNotUse::MergeFrom(const TraderPositionOrders_OrderfillsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TraderPositionOrders_OrderfillsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[30];
}
void TraderPositionOrders_OrderfillsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TraderPositionOrders::InitAsDefaultInstance() {
  ::_TraderPositionOrders_default_instance_._instance.get_mutable()->accountstate_ = const_cast< ::AccountState*>(
      ::AccountState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraderPositionOrders::kTraderidFieldNumber;
const int TraderPositionOrders::kSymbolFieldNumber;
const int TraderPositionOrders::kOrderfillsFieldNumber;
const int TraderPositionOrders::kAccountstateFieldNumber;
const int TraderPositionOrders::kLocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraderPositionOrders::TraderPositionOrders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_TraderPositionOrders.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TraderPositionOrders)
}
TraderPositionOrders::TraderPositionOrders(const TraderPositionOrders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locks_(from.locks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderfills_.MergeFrom(from.orderfills_);
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traderid().size() > 0) {
    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.has_accountstate()) {
    accountstate_ = new ::AccountState(*from.accountstate_);
  } else {
    accountstate_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TraderPositionOrders)
}

void TraderPositionOrders::SharedCtor() {
  traderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountstate_ = NULL;
}

TraderPositionOrders::~TraderPositionOrders() {
  // @@protoc_insertion_point(destructor:TraderPositionOrders)
  SharedDtor();
}

void TraderPositionOrders::SharedDtor() {
  traderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accountstate_;
}

void TraderPositionOrders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TraderPositionOrders::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraderPositionOrders& TraderPositionOrders::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_TraderPositionOrders.base);
  return *internal_default_instance();
}


void TraderPositionOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:TraderPositionOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderfills_.Clear();
  locks_.Clear();
  traderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && accountstate_ != NULL) {
    delete accountstate_;
  }
  accountstate_ = NULL;
  _internal_metadata_.Clear();
}

bool TraderPositionOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TraderPositionOrders)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string traderid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traderid().data(), static_cast<int>(this->traderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TraderPositionOrders.traderid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TraderPositionOrders.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .OrderFills> orderfills = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          TraderPositionOrders_OrderfillsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TraderPositionOrders_OrderfillsEntry_DoNotUse,
              ::std::string, ::OrderFills,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::OrderFills > > parser(&orderfills_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TraderPositionOrders.OrderfillsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AccountState accountstate = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accountstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BtcLocks locks = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TraderPositionOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TraderPositionOrders)
  return false;
#undef DO_
}

void TraderPositionOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TraderPositionOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string traderid = 10;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TraderPositionOrders.traderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->traderid(), output);
  }

  // string symbol = 20;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TraderPositionOrders.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->symbol(), output);
  }

  // map<string, .OrderFills> orderfills = 40;
  if (!this->orderfills().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::OrderFills >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "TraderPositionOrders.OrderfillsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->orderfills().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->orderfills().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::OrderFills >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::OrderFills >::const_iterator
          it = this->orderfills().begin();
          it != this->orderfills().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TraderPositionOrders_OrderfillsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orderfills_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            40, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TraderPositionOrders_OrderfillsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::OrderFills >::const_iterator
          it = this->orderfills().begin();
          it != this->orderfills().end(); ++it) {
        entry.reset(orderfills_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            40, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .AccountState accountstate = 50;
  if (this->has_accountstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->_internal_accountstate(), output);
  }

  // repeated .BtcLocks locks = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60,
      this->locks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TraderPositionOrders)
}

::google::protobuf::uint8* TraderPositionOrders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TraderPositionOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string traderid = 10;
  if (this->traderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traderid().data(), static_cast<int>(this->traderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TraderPositionOrders.traderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->traderid(), target);
  }

  // string symbol = 20;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TraderPositionOrders.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->symbol(), target);
  }

  // map<string, .OrderFills> orderfills = 40;
  if (!this->orderfills().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::OrderFills >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "TraderPositionOrders.OrderfillsEntry.key");
      }
    };

    if (deterministic &&
        this->orderfills().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->orderfills().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::OrderFills >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::OrderFills >::const_iterator
          it = this->orderfills().begin();
          it != this->orderfills().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TraderPositionOrders_OrderfillsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(orderfills_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       40, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TraderPositionOrders_OrderfillsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::OrderFills >::const_iterator
          it = this->orderfills().begin();
          it != this->orderfills().end(); ++it) {
        entry.reset(orderfills_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       40, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .AccountState accountstate = 50;
  if (this->has_accountstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, this->_internal_accountstate(), deterministic, target);
  }

  // repeated .BtcLocks locks = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->locks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraderPositionOrders)
  return target;
}

size_t TraderPositionOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TraderPositionOrders)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .OrderFills> orderfills = 40;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->orderfills_size());
  {
    ::std::unique_ptr<TraderPositionOrders_OrderfillsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::OrderFills >::const_iterator
        it = this->orderfills().begin();
        it != this->orderfills().end(); ++it) {
      entry.reset(orderfills_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .BtcLocks locks = 60;
  {
    unsigned int count = static_cast<unsigned int>(this->locks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locks(static_cast<int>(i)));
    }
  }

  // string traderid = 10;
  if (this->traderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traderid());
  }

  // string symbol = 20;
  if (this->symbol().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // .AccountState accountstate = 50;
  if (this->has_accountstate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *accountstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraderPositionOrders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TraderPositionOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const TraderPositionOrders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraderPositionOrders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TraderPositionOrders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TraderPositionOrders)
    MergeFrom(*source);
  }
}

void TraderPositionOrders::MergeFrom(const TraderPositionOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TraderPositionOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orderfills_.MergeFrom(from.orderfills_);
  locks_.MergeFrom(from.locks_);
  if (from.traderid().size() > 0) {

    traderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traderid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.has_accountstate()) {
    mutable_accountstate()->::AccountState::MergeFrom(from.accountstate());
  }
}

void TraderPositionOrders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TraderPositionOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraderPositionOrders::CopyFrom(const TraderPositionOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TraderPositionOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraderPositionOrders::IsInitialized() const {
  return true;
}

void TraderPositionOrders::Swap(TraderPositionOrders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraderPositionOrders::InternalSwap(TraderPositionOrders* other) {
  using std::swap;
  orderfills_.Swap(&other->orderfills_);
  CastToBase(&locks_)->InternalSwap(CastToBase(&other->locks_));
  traderid_.Swap(&other->traderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountstate_, other->accountstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TraderPositionOrders::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActiveProduct::InitAsDefaultInstance() {
  ::_ActiveProduct_default_instance_._instance.get_mutable()->active_contract_product_ = const_cast< ::ActiveContractProduct*>(
      ::ActiveContractProduct::internal_default_instance());
  ::_ActiveProduct_default_instance_._instance.get_mutable()->exchange_status_ = const_cast< ::ExchangeStatus*>(
      ::ExchangeStatus::internal_default_instance());
  ::_ActiveProduct_default_instance_._instance.get_mutable()->contractbar_ = const_cast< ::ContractBar*>(
      ::ContractBar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveProduct::kActiveContractProductFieldNumber;
const int ActiveProduct::kExchangeStatusFieldNumber;
const int ActiveProduct::kContractbarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveProduct::ActiveProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sidepit_5fapi_2eproto::scc_info_ActiveProduct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActiveProduct)
}
ActiveProduct::ActiveProduct(const ActiveProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_active_contract_product()) {
    active_contract_product_ = new ::ActiveContractProduct(*from.active_contract_product_);
  } else {
    active_contract_product_ = NULL;
  }
  if (from.has_exchange_status()) {
    exchange_status_ = new ::ExchangeStatus(*from.exchange_status_);
  } else {
    exchange_status_ = NULL;
  }
  if (from.has_contractbar()) {
    contractbar_ = new ::ContractBar(*from.contractbar_);
  } else {
    contractbar_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ActiveProduct)
}

void ActiveProduct::SharedCtor() {
  ::memset(&active_contract_product_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contractbar_) -
      reinterpret_cast<char*>(&active_contract_product_)) + sizeof(contractbar_));
}

ActiveProduct::~ActiveProduct() {
  // @@protoc_insertion_point(destructor:ActiveProduct)
  SharedDtor();
}

void ActiveProduct::SharedDtor() {
  if (this != internal_default_instance()) delete active_contract_product_;
  if (this != internal_default_instance()) delete exchange_status_;
  if (this != internal_default_instance()) delete contractbar_;
}

void ActiveProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActiveProduct::descriptor() {
  ::protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActiveProduct& ActiveProduct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sidepit_5fapi_2eproto::scc_info_ActiveProduct.base);
  return *internal_default_instance();
}


void ActiveProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:ActiveProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && active_contract_product_ != NULL) {
    delete active_contract_product_;
  }
  active_contract_product_ = NULL;
  if (GetArenaNoVirtual() == NULL && exchange_status_ != NULL) {
    delete exchange_status_;
  }
  exchange_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && contractbar_ != NULL) {
    delete contractbar_;
  }
  contractbar_ = NULL;
  _internal_metadata_.Clear();
}

bool ActiveProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActiveProduct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ActiveContractProduct active_contract_product = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active_contract_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ExchangeStatus exchange_status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exchange_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ContractBar contractbar = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contractbar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActiveProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActiveProduct)
  return false;
#undef DO_
}

void ActiveProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActiveProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActiveContractProduct active_contract_product = 10;
  if (this->has_active_contract_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_active_contract_product(), output);
  }

  // .ExchangeStatus exchange_status = 20;
  if (this->has_exchange_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_exchange_status(), output);
  }

  // .ContractBar contractbar = 30;
  if (this->has_contractbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_contractbar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ActiveProduct)
}

::google::protobuf::uint8* ActiveProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActiveProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActiveContractProduct active_contract_product = 10;
  if (this->has_active_contract_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_active_contract_product(), deterministic, target);
  }

  // .ExchangeStatus exchange_status = 20;
  if (this->has_exchange_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_exchange_status(), deterministic, target);
  }

  // .ContractBar contractbar = 30;
  if (this->has_contractbar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_contractbar(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveProduct)
  return target;
}

size_t ActiveProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActiveProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ActiveContractProduct active_contract_product = 10;
  if (this->has_active_contract_product()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *active_contract_product_);
  }

  // .ExchangeStatus exchange_status = 20;
  if (this->has_exchange_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exchange_status_);
  }

  // .ContractBar contractbar = 30;
  if (this->has_contractbar()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *contractbar_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActiveProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActiveProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActiveProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActiveProduct)
    MergeFrom(*source);
  }
}

void ActiveProduct::MergeFrom(const ActiveProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActiveProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_active_contract_product()) {
    mutable_active_contract_product()->::ActiveContractProduct::MergeFrom(from.active_contract_product());
  }
  if (from.has_exchange_status()) {
    mutable_exchange_status()->::ExchangeStatus::MergeFrom(from.exchange_status());
  }
  if (from.has_contractbar()) {
    mutable_contractbar()->::ContractBar::MergeFrom(from.contractbar());
  }
}

void ActiveProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActiveProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveProduct::CopyFrom(const ActiveProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActiveProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveProduct::IsInitialized() const {
  return true;
}

void ActiveProduct::Swap(ActiveProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveProduct::InternalSwap(ActiveProduct* other) {
  using std::swap;
  swap(active_contract_product_, other->active_contract_product_);
  swap(exchange_status_, other->exchange_status_);
  swap(contractbar_, other->contractbar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActiveProduct::GetMetadata() const {
  protobuf_sidepit_5fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sidepit_5fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Transaction* Arena::CreateMaybeMessage< ::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::Transaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SignedTransaction* Arena::CreateMaybeMessage< ::SignedTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::SignedTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NewOrder* Arena::CreateMaybeMessage< ::NewOrder >(Arena* arena) {
  return Arena::CreateInternal< ::NewOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AuctionBid* Arena::CreateMaybeMessage< ::AuctionBid >(Arena* arena) {
  return Arena::CreateInternal< ::AuctionBid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UnlockRequest* Arena::CreateMaybeMessage< ::UnlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UnlockRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EpochEvent* Arena::CreateMaybeMessage< ::EpochEvent >(Arena* arena) {
  return Arena::CreateInternal< ::EpochEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExchangeEvent* Arena::CreateMaybeMessage< ::ExchangeEvent >(Arena* arena) {
  return Arena::CreateInternal< ::ExchangeEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TxBlockStream* Arena::CreateMaybeMessage< ::TxBlockStream >(Arena* arena) {
  return Arena::CreateInternal< ::TxBlockStream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MarketQuote* Arena::CreateMaybeMessage< ::MarketQuote >(Arena* arena) {
  return Arena::CreateInternal< ::MarketQuote >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EpochBar* Arena::CreateMaybeMessage< ::EpochBar >(Arena* arena) {
  return Arena::CreateInternal< ::EpochBar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContractBar* Arena::CreateMaybeMessage< ::ContractBar >(Arena* arena) {
  return Arena::CreateInternal< ::ContractBar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BookOrder* Arena::CreateMaybeMessage< ::BookOrder >(Arena* arena) {
  return Arena::CreateInternal< ::BookOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DepthItem* Arena::CreateMaybeMessage< ::DepthItem >(Arena* arena) {
  return Arena::CreateInternal< ::DepthItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MarketData* Arena::CreateMaybeMessage< ::MarketData >(Arena* arena) {
  return Arena::CreateInternal< ::MarketData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::FillData* Arena::CreateMaybeMessage< ::FillData >(Arena* arena) {
  return Arena::CreateInternal< ::FillData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OrderData* Arena::CreateMaybeMessage< ::OrderData >(Arena* arena) {
  return Arena::CreateInternal< ::OrderData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Contract* Arena::CreateMaybeMessage< ::Contract >(Arena* arena) {
  return Arena::CreateInternal< ::Contract >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Product* Arena::CreateMaybeMessage< ::Product >(Arena* arena) {
  return Arena::CreateInternal< ::Product >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Schedule* Arena::CreateMaybeMessage< ::Schedule >(Arena* arena) {
  return Arena::CreateInternal< ::Schedule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TradingSession* Arena::CreateMaybeMessage< ::TradingSession >(Arena* arena) {
  return Arena::CreateInternal< ::TradingSession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SessionStatus* Arena::CreateMaybeMessage< ::SessionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::SessionStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ExchangeStatus* Arena::CreateMaybeMessage< ::ExchangeStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ExchangeStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ActiveContractProduct* Arena::CreateMaybeMessage< ::ActiveContractProduct >(Arena* arena) {
  return Arena::CreateInternal< ::ActiveContractProduct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Position* Arena::CreateMaybeMessage< ::Position >(Arena* arena) {
  return Arena::CreateInternal< ::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OrderFills* Arena::CreateMaybeMessage< ::OrderFills >(Arena* arena) {
  return Arena::CreateInternal< ::OrderFills >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AccountState_PositionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::AccountState_PositionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::AccountState_PositionsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AccountState* Arena::CreateMaybeMessage< ::AccountState >(Arena* arena) {
  return Arena::CreateInternal< ::AccountState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BtcLocks* Arena::CreateMaybeMessage< ::BtcLocks >(Arena* arena) {
  return Arena::CreateInternal< ::BtcLocks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestReply* Arena::CreateMaybeMessage< ::RequestReply >(Arena* arena) {
  return Arena::CreateInternal< ::RequestReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ReplyRequest* Arena::CreateMaybeMessage< ::ReplyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ReplyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TraderPositionOrders_OrderfillsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TraderPositionOrders_OrderfillsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TraderPositionOrders_OrderfillsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TraderPositionOrders* Arena::CreateMaybeMessage< ::TraderPositionOrders >(Arena* arena) {
  return Arena::CreateInternal< ::TraderPositionOrders >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ActiveProduct* Arena::CreateMaybeMessage< ::ActiveProduct >(Arena* arena) {
  return Arena::CreateInternal< ::ActiveProduct >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
